install.packages("sjPlot")
install.packages("sjmisc")
library(reshape2)
library(sjPlot)
library(sjmisc)
library(ggplot2)
?plot_models
plot_models(all_high_lin, all_high_quad, all_high_cub)
data(data)
dat <- data
data(dat)
plot_models(all_high_lin, all_high_quad, all_high_cub, data = data)
## Total Deaths, summer months, avg high temp in county, max high temp in month
t_high <- t %>% group_by(county, fips, month, year, monthyear) %>%
dplyr::filter(between(month, 5, 9)) %>%
summarize(maximum_high_temp_in_month = max(mean_high, na.rm = T),
avg_high_temp_in_month = mean(mean_high, na.rm = T))
data <- left_join(m, t_high, by = c("fips", "month", "year"))
data <- data %>%
group_by(fips, measure = maximum_high_temp_in_month - 273.15, monthyear, county = county.x, income_group, population_est) %>%
summarise(deaths = sum(deaths, na.rm = T)) %>%
dplyr::filter(is.finite(measure))
data <- na.omit(data)
## No Interactions
par(mfcol = c(3,2))
boots <- bootstrap_data(data, short=T, level=1, name = "total_summer_high_linear")
plot_regs(data, boots, "Deaths per 10K + Avg High County, Max High in Month", level = 1)
boots <- bootstrap_data(data, short=T, level=2, name = "total_summer_high_quad")
plot_regs(data, boots, "Deaths per 10K + Avg High County, Max High in Month", level = 2)
boots <- bootstrap_data(data, short=T, level=3, name = "total_summer_high_cub")
plot_regs(data, boots, "Deaths per 10K + Avg High County, Max High in Month", level = 3)
all_high_lin <- fe_model(data, level = 1)
all_high_quad <- fe_model(data, level = 2)
all_high_cub <- fe_model(data, level = 3)
## With Interaction
boots <- bootstrap_data(data, short=T, level=1, interact=T, name = "total_summer_high_linear_inter")
plot_regs(data, boots, "Deaths per 10K + Avg High County, Max High in Month w/Interaction", level = 1)
boots <- bootstrap_data(data, short=T, level=2, interact=T, name = "total_summer_high_quad_inter")
plot_regs(data, boots, "Deaths per 10K + Avg High County, Max High in Month w/Interaction", level = 2)
boots <- bootstrap_data(data, short=T, level=3, interact=T, name = "total_summer_high_cub_inter")
plot_regs(data, boots, "Deaths per 10K + Avg High County, Max High in Month w/Interaction", level = 3)
all_high_int_lin <- fe_model(data, level = 1)
all_high_int_quad <- fe_model(data, level = 2)
all_high_int_cub <- fe_model(data, level = 3)
all_high_int_lin
summary(all_high_int_lin)
## With Interaction
boots <- bootstrap_data(data, short=T, level=1, interact=T, name = "total_summer_high_linear_inter")
coef(all_high_int_lin)
debug(bootstrap_data)
## With Interaction
boots <- bootstrap_data(data, short=T, level=1, interact=T, name = "total_summer_high_linear_inter")
coef
model
coef(model)
#Function to use in order to get a 95% confidence interval for our regression
#Bootstraps the data and essentially resamples and runs the same regression on subset of the data a bunch of times
#Level refers to the type of regression we are running. 1 = linear 2 = quadratic "log" = log of course
#returns a list of coefficients that can be used for plotting
bootstrap_data <- function(data, short=T, level, interact=F, name = "") {
num <- ifelse(short, 100, 1000)
ll = dim(data)[1]
if(interact) {
coef <- matrix(nrow=num, ncol=(ifelse(level=="log", 1, level) + 1))
} else {
coef <- matrix(nrow=num, ncol=ifelse(level=="log", 1, level))
}
i <- 1
while (i <= num)  {
#sample the original data and pull subset of rows
samp <- sample(1:ll,size=ll,replace=T)
newdata = data[samp,]
#estimate our regression y = b1*T + err
model <- fe_model(newdata, level, interact)
#extract the coefficient estimates of b1 and b2 and store them in the matrix we made above
coef[i,] <- coef(model)
print(i)  #print this out so you can watch progress
i <- i+1
}
#save it out for the next run if name was provided
returnlist <- list(coef)
if(name != "") {saveRDS(returnlist, paste0("./bootstraps/", name))}
return(returnlist)
}
## With Interaction
boots <- bootstrap_data(data, short=T, level=1, interact=T, name = "total_summer_high_linear_inter")
plot_regs(data, boots, "Deaths per 10K + Avg High County, Max High in Month w/Interaction", level = 1)
boots <- bootstrap_data(data, short=T, level=2, interact=T, name = "total_summer_high_quad_inter")
plot_regs(data, boots, "Deaths per 10K + Avg High County, Max High in Month w/Interaction", level = 2)
boots <- bootstrap_data(data, short=T, level=3, interact=T, name = "total_summer_high_cub_inter")
plot_regs(data, boots, "Deaths per 10K + Avg High County, Max High in Month w/Interaction", level = 3)
all_high_int_lin <- fe_model(data, level = 1, interact = T)
all_high_int_quad <- fe_model(data, level = 2, interact = T)
all_high_int_cub <- fe_model(data, level = 3, interact = T)
View(t_high)
View(mortality)
View(t)
## Total Deaths, all months, avg high temp in county, max high temp in month
t_high <- t %>% group_by(county, fips, month, year, monthyear) %>%
summarize(maximum_high_temp_in_month = max(mean_high, na.rm = T),
avg_high_temp_in_month = mean(mean_high, na.rm = T))
data <- left_join(m, t_high, by = c("fips", "month", "year"))
data <- data %>%
group_by(fips, measure = maximum_high_temp_in_month - 273.15, monthyear, county = county.x, income_group, population_est) %>%
summarise(deaths = sum(deaths, na.rm = T)) %>%
dplyr::filter(is.finite(measure))
data <- na.omit(data)
## No Interactions
par(mfcol = c(3,2))
boots <- bootstrap_data(data, short=T, level=1, name = "total_high_linear")
plot_regs(data, boots, "Total Deaths + Avg High County, Max High in Month", level = 1)
boots <- bootstrap_data(data, short=T, level=2, name = "total_high_quad")
plot_regs(data, boots, "Total Deaths + Avg High County, Max High in Month", level = 2)
boots <- bootstrap_data(data, short=T, level=3, name = "total_high_cub")
plot_regs(data, boots, "Total Deaths + Avg High County, Max High in Month", level = 3)
all_high_lin <- fe_model(data, level = 1)
all_high_quad <- fe_model(data, level = 2)
all_high_cub <- fe_model(data, level = 3)
## Total Deaths, summer months, avg high temp in county, max high temp in month
t_high <- t %>% group_by(county, fips, month, year, monthyear) %>%
dplyr::filter(between(month, 5, 9)) %>%
summarize(maximum_high_temp_in_month = max(mean_high, na.rm = T),
avg_high_temp_in_month = mean(mean_high, na.rm = T))
data <- left_join(m, t_high, by = c("fips", "month", "year"))
data <- data %>%
group_by(fips, measure = maximum_high_temp_in_month - 273.15, monthyear, county = county.x, income_group, population_est) %>%
summarise(deaths = sum(deaths, na.rm = T)) %>%
dplyr::filter(is.finite(measure))
data <- na.omit(data)
## No Interactions
boots <- bootstrap_data(data, short=T, level=1, name = "total_summer_high_linear")
plot_regs(data, boots, "Total Deaths Summer + Avg High County, Max High in Month", level = 1)
boots <- bootstrap_data(data, short=T, level=2, name = "total_summer_high_quad")
plot_regs(data, boots, "Total Deaths Summer + Avg High County, Max High in Month", level = 2)
boots <- bootstrap_data(data, short=T, level=3, name = "total_summer_high_cub")
plot_regs(data, boots, "Total Deaths Summer + Avg High County, Max High in Month", level = 3)
all_high_lin <- fe_model(data, level = 1)
all_high_quad <- fe_model(data, level = 2)
all_high_cub <- fe_model(data, level = 3)
#Function to output a plot with the regression and 95% confidence interval
plot_regs <- function(data, coefs, title, level) {
coefs <- coefs[[1]]
max_val <- max(data$measure, na.rm = T)
min_val <- min(data$measure, na.rm = T)
x = min_val:max_val ###this should be the max SWE we see
bts <- matrix(nrow=100,ncol=length(x))
#get all my y values
if (level == 1) {
for (j in 1:100) {
yy <- x*coefs[j]
yy <- yy - yy[x=1] ## this x value should be the average swe. Otherwise we can just set it to the first yy value
bts[j,] <- yy
}
} else if (level == 2) {
for (j in 1:100) {
yy <- x*coefs[j,1] + x^2*coefs[j,2]
yy <- yy - yy[x=1]
bts[j,] <- yy
}
} else if (level == 3) {
for (j in 1:100) {
yy <- x*coefs[j,1] + x^2*coefs[j,2] + x^3*coefs[j,3]
yy <- yy - yy[x=1]
bts[j,] <- yy
}
}
#figure out the 95 and 5 percentiles of the bootstraps
confint <- apply(bts,2,function(x) quantile(x,probs=c(0.05,0.5,0.95), na.rm = T))
#plot median estimate among the bootstraps
plot(x, confint[2,], type = "l", las=1,xlab="Temperature (Celsius)",ylab="Mortality", col="navy", main=paste(title))
#plot confidence intervals
polygon(c(x,rev(x)),c(confint[1,],rev(confint[3,])),col=adjustcolor("navy", alpha=.3),border = NA)
rug(data$measure, side = 1, alpha = 0.1)
}
#Function to output a plot with the regression and 95% confidence interval
plot_regs <- function(data, coefs, title, level) {
coefs <- coefs[[1]]
max_val <- max(data$measure, na.rm = T)
min_val <- min(data$measure, na.rm = T)
x = min_val:max_val ###this should be the max SWE we see
bts <- matrix(nrow=100,ncol=length(x))
#get all my y values
if (level == 1) {
for (j in 1:100) {
yy <- x*coefs[j]
yy <- yy - yy[x=1] ## this x value should be the average swe. Otherwise we can just set it to the first yy value
bts[j,] <- yy
}
} else if (level == 2) {
for (j in 1:100) {
yy <- x*coefs[j,1] + x^2*coefs[j,2]
yy <- yy - yy[x=1]
bts[j,] <- yy
}
} else if (level == 3) {
for (j in 1:100) {
yy <- x*coefs[j,1] + x^2*coefs[j,2] + x^3*coefs[j,3]
yy <- yy - yy[x=1]
bts[j,] <- yy
}
}
#figure out the 95 and 5 percentiles of the bootstraps
confint <- apply(bts,2,function(x) quantile(x,probs=c(0.05,0.5,0.95), na.rm = T))
#plot median estimate among the bootstraps
plot(x, confint[2,], type = "l", las=1,xlab="Temperature (Celsius)",ylab="Mortality", col="navy", main=paste(title))
#plot confidence intervals
polygon(c(x,rev(x)),c(confint[1,],rev(confint[3,])),col=adjustcolor("navy", alpha=.3),border = NA)
rug(data$measure, side = 1, alpha = 0.1)
}
#Function to output a plot with the regression and 95% confidence interval
plot_regs <- function(data, coefs, title, level) {
coefs <- coefs[[1]]
max_val <- max(data$measure, na.rm = T)
min_val <- min(data$measure, na.rm = T)
x = min_val:max_val ###this should be the max SWE we see
bts <- matrix(nrow=100,ncol=length(x))
#get all my y values
if (level == 1) {
for (j in 1:100) {
yy <- x*coefs[j]
yy <- yy - yy[x=1] ## this x value should be the average swe. Otherwise we can just set it to the first yy value
bts[j,] <- yy
}
} else if (level == 2) {
for (j in 1:100) {
yy <- x*coefs[j,1] + x^2*coefs[j,2]
yy <- yy - yy[x=1]
bts[j,] <- yy
}
} else if (level == 3) {
for (j in 1:100) {
yy <- x*coefs[j,1] + x^2*coefs[j,2] + x^3*coefs[j,3]
yy <- yy - yy[x=1]
bts[j,] <- yy
}
}
#figure out the 95 and 5 percentiles of the bootstraps
confint <- apply(bts,2,function(x) quantile(x,probs=c(0.05,0.5,0.95), na.rm = T))
#plot median estimate among the bootstraps
plot(x, confint[2,], type = "l", las=1,xlab="Temperature (Celsius)",ylab="Mortality", col="navy", main=paste(title))
#plot confidence intervals
polygon(c(x,rev(x)),c(confint[1,],rev(confint[3,])),col=adjustcolor("navy", alpha=.3),border = NA)
rug(data$measure, side = 1, alpha = 0.1)
}
plot_regs(data, boots, "Total Deaths Summer + Avg High County, Max High in Month", level = 1)
?rug
#Function to output a plot with the regression and 95% confidence interval
plot_regs <- function(data, coefs, title, level) {
coefs <- coefs[[1]]
max_val <- max(data$measure, na.rm = T)
min_val <- min(data$measure, na.rm = T)
x = min_val:max_val ###this should be the max SWE we see
bts <- matrix(nrow=100,ncol=length(x))
#get all my y values
if (level == 1) {
for (j in 1:100) {
yy <- x*coefs[j]
yy <- yy - yy[x=1] ## this x value should be the average swe. Otherwise we can just set it to the first yy value
bts[j,] <- yy
}
} else if (level == 2) {
for (j in 1:100) {
yy <- x*coefs[j,1] + x^2*coefs[j,2]
yy <- yy - yy[x=1]
bts[j,] <- yy
}
} else if (level == 3) {
for (j in 1:100) {
yy <- x*coefs[j,1] + x^2*coefs[j,2] + x^3*coefs[j,3]
yy <- yy - yy[x=1]
bts[j,] <- yy
}
}
#figure out the 95 and 5 percentiles of the bootstraps
confint <- apply(bts,2,function(x) quantile(x,probs=c(0.05,0.5,0.95), na.rm = T))
#plot median estimate among the bootstraps
plot(x, confint[2,], type = "l", las=1,xlab="Temperature (Celsius)",ylab="Mortality", col="navy", main=paste(title))
#plot confidence intervals
polygon(c(x,rev(x)),c(confint[1,],rev(confint[3,])),col=adjustcolor("navy", alpha=.3),border = NA)
rug(data$measure, side = 1, col=adjustcolor(alpha = 0.1))
}
plot_regs(data, boots, "Total Deaths Summer + Avg High County, Max High in Month", level = 1)
#Function to output a plot with the regression and 95% confidence interval
plot_regs <- function(data, coefs, title, level) {
coefs <- coefs[[1]]
max_val <- max(data$measure, na.rm = T)
min_val <- min(data$measure, na.rm = T)
x = min_val:max_val ###this should be the max SWE we see
bts <- matrix(nrow=100,ncol=length(x))
#get all my y values
if (level == 1) {
for (j in 1:100) {
yy <- x*coefs[j]
yy <- yy - yy[x=1] ## this x value should be the average swe. Otherwise we can just set it to the first yy value
bts[j,] <- yy
}
} else if (level == 2) {
for (j in 1:100) {
yy <- x*coefs[j,1] + x^2*coefs[j,2]
yy <- yy - yy[x=1]
bts[j,] <- yy
}
} else if (level == 3) {
for (j in 1:100) {
yy <- x*coefs[j,1] + x^2*coefs[j,2] + x^3*coefs[j,3]
yy <- yy - yy[x=1]
bts[j,] <- yy
}
}
#figure out the 95 and 5 percentiles of the bootstraps
confint <- apply(bts,2,function(x) quantile(x,probs=c(0.05,0.5,0.95), na.rm = T))
#plot median estimate among the bootstraps
plot(x, confint[2,], type = "l", las=1,xlab="Temperature (Celsius)",ylab="Mortality", col="navy", main=paste(title))
#plot confidence intervals
polygon(c(x,rev(x)),c(confint[1,],rev(confint[3,])),col=adjustcolor("navy", alpha=.3),border = NA)
rug(data$measure, side = 1, col=adjustcolor("black", alpha = 0.1))
}
plot_regs(data, boots, "Total Deaths Summer + Avg High County, Max High in Month", level = 1)
#Function to output a plot with the regression and 95% confidence interval
plot_regs <- function(data, coefs, title, level) {
coefs <- coefs[[1]]
max_val <- max(data$measure, na.rm = T)
min_val <- min(data$measure, na.rm = T)
x = min_val:max_val ###this should be the max SWE we see
bts <- matrix(nrow=100,ncol=length(x))
#get all my y values
if (level == 1) {
for (j in 1:100) {
yy <- x*coefs[j]
yy <- yy - yy[x=1] ## this x value should be the average swe. Otherwise we can just set it to the first yy value
bts[j,] <- yy
}
} else if (level == 2) {
for (j in 1:100) {
yy <- x*coefs[j,1] + x^2*coefs[j,2]
yy <- yy - yy[x=1]
bts[j,] <- yy
}
} else if (level == 3) {
for (j in 1:100) {
yy <- x*coefs[j,1] + x^2*coefs[j,2] + x^3*coefs[j,3]
yy <- yy - yy[x=1]
bts[j,] <- yy
}
}
#figure out the 95 and 5 percentiles of the bootstraps
confint <- apply(bts,2,function(x) quantile(x,probs=c(0.05,0.5,0.95), na.rm = T))
#plot median estimate among the bootstraps
plot(x, confint[2,], type = "l", las=1,xlab="Temperature (Celsius)",ylab="Mortality", col="navy", main=paste(title))
#plot confidence intervals
polygon(c(x,rev(x)),c(confint[1,],rev(confint[3,])),col=adjustcolor("navy", alpha=.3),border = NA)
rug(data$measure, side = 1, col=adjustcolor("black", alpha = 0.01))
}
plot_regs(data, boots, "Total Deaths Summer + Avg High County, Max High in Month", level = 1)
#Function to output a plot with the regression and 95% confidence interval
plot_regs <- function(data, coefs, title, level) {
coefs <- coefs[[1]]
max_val <- max(data$measure, na.rm = T)
min_val <- min(data$measure, na.rm = T)
x = min_val:max_val ###this should be the max SWE we see
bts <- matrix(nrow=100,ncol=length(x))
#get all my y values
if (level == 1) {
for (j in 1:100) {
yy <- x*coefs[j]
yy <- yy - yy[x=1] ## this x value should be the average swe. Otherwise we can just set it to the first yy value
bts[j,] <- yy
}
} else if (level == 2) {
for (j in 1:100) {
yy <- x*coefs[j,1] + x^2*coefs[j,2]
yy <- yy - yy[x=1]
bts[j,] <- yy
}
} else if (level == 3) {
for (j in 1:100) {
yy <- x*coefs[j,1] + x^2*coefs[j,2] + x^3*coefs[j,3]
yy <- yy - yy[x=1]
bts[j,] <- yy
}
}
#figure out the 95 and 5 percentiles of the bootstraps
confint <- apply(bts,2,function(x) quantile(x,probs=c(0.05,0.5,0.95), na.rm = T))
#plot median estimate among the bootstraps
plot(x, confint[2,], type = "l", las=1,xlab="Temperature (Celsius)",ylab="Mortality", col="navy", main=paste(title))
#plot confidence intervals
polygon(c(x,rev(x)),c(confint[1,],rev(confint[3,])),col=adjustcolor("navy", alpha=.3),border = NA)
rug(data$measure, side = 1, col=adjustcolor("black", alpha = 0.05))
}
## Total Deaths, all months, avg high temp in county, max high temp in month
t_high <- t %>% group_by(county, fips, month, year, monthyear) %>%
summarize(maximum_high_temp_in_month = max(mean_high, na.rm = T),
avg_high_temp_in_month = mean(mean_high, na.rm = T))
data <- left_join(m, t_high, by = c("fips", "month", "year"))
data <- data %>%
group_by(fips, measure = maximum_high_temp_in_month - 273.15, monthyear, county = county.x, income_group, population_est) %>%
summarise(deaths = sum(deaths, na.rm = T)) %>%
dplyr::filter(is.finite(measure))
data <- na.omit(data)
## No Interactions
par(mfcol = c(3,2))
boots <- bootstrap_data(data, short=T, level=1, name = "total_high_linear")
plot_regs(data, boots, "Total Deaths + Avg High County, Max High in Month", level = 1)
boots <- bootstrap_data(data, short=T, level=2, name = "total_high_quad")
plot_regs(data, boots, "Total Deaths + Avg High County, Max High in Month", level = 2)
boots <- bootstrap_data(data, short=T, level=3, name = "total_high_cub")
plot_regs(data, boots, "Total Deaths + Avg High County, Max High in Month", level = 3)
all_high_lin <- fe_model(data, level = 1)
all_high_quad <- fe_model(data, level = 2)
all_high_cub <- fe_model(data, level = 3)
## Total Deaths, summer months, avg high temp in county, max high temp in month
t_high <- t %>% group_by(county, fips, month, year, monthyear) %>%
dplyr::filter(between(month, 5, 9)) %>%
summarize(maximum_high_temp_in_month = max(mean_high, na.rm = T),
avg_high_temp_in_month = mean(mean_high, na.rm = T))
data <- left_join(m, t_high, by = c("fips", "month", "year"))
data <- data %>%
group_by(fips, measure = maximum_high_temp_in_month - 273.15, monthyear, county = county.x, income_group, population_est) %>%
summarise(deaths = sum(deaths, na.rm = T)) %>%
dplyr::filter(is.finite(measure))
data <- na.omit(data)
## No Interactions
boots <- bootstrap_data(data, short=T, level=1, name = "total_summer_high_linear")
plot_regs(data, boots, "Total Deaths Summer + Avg High County, Max High in Month", level = 1)
boots <- bootstrap_data(data, short=T, level=2, name = "total_summer_high_quad")
plot_regs(data, boots, "Total Deaths Summer + Avg High County, Max High in Month", level = 2)
boots <- bootstrap_data(data, short=T, level=3, name = "total_summer_high_cub")
plot_regs(data, boots, "Total Deaths Summer + Avg High County, Max High in Month", level = 3)
all_high_lin <- fe_model(data, level = 1)
all_high_quad <- fe_model(data, level = 2)
all_high_cub <- fe_model(data, level = 3)
## PerCapita Deaths, all months, avg high temp in county, max high temp in month
t_high <- t %>% group_by(county, fips, month, year, monthyear) %>%
summarize(maximum_high_temp_in_month = max(mean_high, na.rm = T),
avg_high_temp_in_month = mean(mean_high, na.rm = T))
data <- left_join(m, t_high, by = c("fips", "month", "year"))
data <- data %>%
group_by(fips, measure = maximum_high_temp_in_month - 273.15, monthyear, county = county.x, income_group, population_est) %>%
summarise(deaths = sum(deaths, na.rm = T)) %>%
dplyr::filter(is.finite(measure)) %>%
mutate(deaths = (deaths/as.numeric(population_est))*10000)
data <- na.omit(data)
par(mfcol = c(3,2))
boots <- bootstrap_data(data, short=T, level=1, name = "total_high_linear")
plot_regs(data, boots, "Deaths per 10K + Max High in Month", level = 1)
boots <- bootstrap_data(data, short=T, level=2, name = "total_high_quad")
plot_regs(data, boots, "Deaths per 10K + Max High in Month", level = 2)
boots <- bootstrap_data(data, short=T, level=3, name = "total_high_cub")
plot_regs(data, boots, "Deaths per 10K + Max High in Month", level = 3)
all_high_lin <- fe_model(data, level = 1)
all_high_quad <- fe_model(data, level = 2)
all_high_cub <- fe_model(data, level = 3)
## PerCapita Deaths, summer months, avg high temp in county, max high temp in month
t_high <- t %>% group_by(county, fips, month, year, monthyear) %>%
dplyr::filter(between(month, 5, 9)) %>%
summarize(maximum_high_temp_in_month = max(mean_high, na.rm = T),
avg_high_temp_in_month = mean(mean_high, na.rm = T))
data <- left_join(m, t_high, by = c("fips", "month", "year"))
data <- data %>%
group_by(fips, measure = maximum_high_temp_in_month - 273.15, monthyear, county = county.x, income_group, population_est) %>%
summarise(deaths = sum(deaths, na.rm = T)) %>%
dplyr::filter(is.finite(measure)) %>%
mutate(deaths = (deaths/as.numeric(population_est))*10000)
data <- na.omit(data)
boots <- bootstrap_data(data, short=T, level=1, name = "total_summer_high_linear")
plot_regs(data, boots, "Deaths per 10K Summer + Max High in Month", level = 1)
boots <- bootstrap_data(data, short=T, level=2, name = "total_summer_high_quad")
plot_regs(data, boots, "Deaths per 10K Summer + Max High in Month", level = 2)
boots <- bootstrap_data(data, short=T, level=3, name = "total_summer_high_cub")
plot_regs(data, boots, "Deaths per 10K Summer + Max High in Month", level = 3)
all_high_lin <- fe_model(data, level = 1)
all_high_quad <- fe_model(data, level = 2)
all_high_cub <- fe_model(data, level = 3)
View(plot_regs)
ifelse(dir.exists("~/Box Sync/heatwave_covid"),
setwd("~/Box Sync/heatwave_covid"),
setwd("/oak/stanford/groups/omramom/group_members/aminaly/heatwave_covid"))
library(ncdf4)
library(dplyr)
library(stringr)
library(sf)
library(raster)
library(velox)
library(lfe)
library(lubridate)
#get list of all precip data files
gridMET_files <- list.files("gridMET", pattern = "*.nc", full.names = T)
gridMET_files
#load in counties
counties <- st_read("shapefiles/tl_2017_us_county.shp")
# Run through temperature brick and extract over the buffers
all_data <- c()
i <- 1
i <- gridMET_files[1]
print(i)
file <- brick(i)
file
crs(file) <- "+init=EPSG:4326"
file
crs(file) <- "+init=EPSG:4326"
temp <- c()
nms <- as.numeric(substring(as.character(names(file[[j]])),2))
temp$date <- rep(as.Date(nms, origin= "1900-01-01"), nrow(counties))
temp <- as.data.frame(temp)
j <- 1
temp <- c()
nms <- as.numeric(substring(as.character(names(file[[j]])),2))
temp$date <- rep(as.Date(nms, origin= "1900-01-01"), nrow(counties))
temp <- as.data.frame(temp)
#load in counties
counties <- st_read("shapefiles/tl_2017_us_county.shp")
crs(file) <- "+init=EPSG:4326"
