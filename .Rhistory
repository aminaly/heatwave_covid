B2 <- (cov(X2, X3))/(cov(X1, X3))
B3 <- (cov(X2, X3))/(cov(X1, X2))
a2 <- mean(X2) - (B2 * mean(X1))
a3 <- mean(X3) - (B3 * mean(X1))
print(paste("alpha_2 =", round(a2, 2), "and  beta_2 =", B2))
print(paste("alpha_3 =", a3, "and  beta_3 =", B3))
soil_moisture <- read.csv("Q2_soil_moisture.csv")
a1 <- 0
B1 <- 1
X1 <- soil_moisture$X1
X2 <- soil_moisture$X2
X3 <- soil_moisture$X3
B2 <- (cov(X2, X3))/(cov(X1, X3))
B3 <- (cov(X2, X3))/(cov(X1, X2))
a2 <- mean(X2) - (B2 * mean(X1))
a3 <- mean(X3) - (B3 * mean(X1))
print(paste("alpha_2 =", round(a2, 3), "and  beta_2 =", round(B2, 3)))
print(paste("alpha_3 =", round(a3, 3), "and  beta_3 =", round(B3. 3)))
soil_moisture <- read.csv("Q2_soil_moisture.csv")
a1 <- 0
B1 <- 1
X1 <- soil_moisture$X1
X2 <- soil_moisture$X2
X3 <- soil_moisture$X3
B2 <- (cov(X2, X3))/(cov(X1, X3))
B3 <- (cov(X2, X3))/(cov(X1, X2))
a2 <- mean(X2) - (B2 * mean(X1))
a3 <- mean(X3) - (B3 * mean(X1))
print(paste("alpha_2 =", round(a2, 3), "and  beta_2 =", round(B2, 3)))
print(paste("alpha_3 =", round(a3, 3), "and  beta_3 =", round(B3, 3)))
head(soil_moisture)
soil_moisture$T1 <- (soil_moisture$X1 - a1) / B1
soil_moisture$T2 <- (soil_moisture$X1 - a2) / B2
soil_moisture$T3 <- (soil_moisture$X1 - a3) / B3
head(soil_moisture)
soil_moisture$T1 <- (X1 - a1) / B1
soil_moisture$T2 <- (X2 - a2) / B2
soil_moisture$T3 <- (X3 - a3) / B3
X1_avg <- mean(X1)
X2_avg <- mean(X2)
X3_avg <- mean(X3)
T1 <- soil_moisture$T1
T2 <- soil_moisture$T2
T3 <- soil_moisture$T3
T1_avg <- mean(T1)
T2_avg <- mean(T2)
T3_avg <- mean(T3)
soil_moisture$ubrmse_1 <- ((X1 - X1_avg) - (T1 - T1_avg))^2
soil_moisture$ubrmse_2 <- ((X2 - X2_avg) - (T2 - T2_avg))^2
soil_moisture$ubrmse_3 <- ((X3 - X3_avg) - (T3 - T3_avg))^2
head(soil_moisture)
soil_moisture$T1 <- (X1 - a1) / B1
soil_moisture$T2 <- (X2 - a2) / B2
soil_moisture$T3 <- (X3 - a3) / B3
X1_avg <- mean(X1)
X2_avg <- mean(X2)
X3_avg <- mean(X3)
T1 <- soil_moisture$T1
T2 <- soil_moisture$T2
T3 <- soil_moisture$T3
T1_avg <- mean(T1)
T2_avg <- mean(T2)
T3_avg <- mean(T3)
soil_moisture$ubrmse_1 <- ((X1 - X1_avg) - (T1 - T1_avg))^2
soil_moisture$ubrmse_2 <- ((X2 - X2_avg) - (T2 - T2_avg))^2
soil_moisture$ubrmse_3 <- ((X3 - X3_avg) - (T3 - T3_avg))^2
print(paste("The unbiased RMSE for dataset 1 is" sqrt(mean(soil_moisture$ubrmse_1))))
soil_moisture$T1 <- (X1 - a1) / B1
soil_moisture$T2 <- (X2 - a2) / B2
soil_moisture$T3 <- (X3 - a3) / B3
X1_avg <- mean(X1)
X2_avg <- mean(X2)
X3_avg <- mean(X3)
T1 <- soil_moisture$T1
T2 <- soil_moisture$T2
T3 <- soil_moisture$T3
T1_avg <- mean(T1)
T2_avg <- mean(T2)
T3_avg <- mean(T3)
soil_moisture$ubrmse_1 <- ((X1 - X1_avg) - (T1 - T1_avg))^2
soil_moisture$ubrmse_2 <- ((X2 - X2_avg) - (T2 - T2_avg))^2
soil_moisture$ubrmse_3 <- ((X3 - X3_avg) - (T3 - T3_avg))^2
print(paste("The unbiased RMSE for dataset 1 is", sqrt(mean(soil_moisture$ubrmse_1))))
print(paste("The unbiased RMSE for dataset 2 is", sqrt(mean(soil_moisture$ubrmse_2))))
print(paste("The unbiased RMSE for dataset 3 is", sqrt(mean(soil_moisture$ubrmse_3))))
soil_moisture$T1 <- (X1 - a1) / B1
soil_moisture$T2 <- (X2 - a2) / B2
soil_moisture$T3 <- (X3 - a3) / B3
X1_avg <- mean(X1)
X2_avg <- mean(X2)
X3_avg <- mean(X3)
T1 <- soil_moisture$T1
T2 <- soil_moisture$T2
T3 <- soil_moisture$T3
T1_avg <- mean(T1)
T2_avg <- mean(T2)
T3_avg <- mean(T3)
soil_moisture$ubrmse_1 <- ((X1 - X1_avg) - (T1 - T1_avg))^2
soil_moisture$ubrmse_2 <- ((X2 - X2_avg) - (T2 - T2_avg))^2
soil_moisture$ubrmse_3 <- ((X3 - X3_avg) - (T3 - T3_avg))^2
print(paste("The unbiased RMSE for dataset 1 is", round(sqrt(mean(soil_moisture$ubrmse_1)), 3)))
print(paste("The unbiased RMSE for dataset 2 is", round(sqrt(mean(soil_moisture$ubrmse_2)), 3)))
print(paste("The unbiased RMSE for dataset 3 is", round(sqrt(mean(soil_moisture$ubrmse_3)), 3)))
soil_moisture$T1 <- (X1 - a1) / B1
soil_moisture$T2 <- (X2 - a2) / B2
soil_moisture$T3 <- (X3 - a3) / B3
X1_avg <- mean(X1)
X2_avg <- mean(X2)
X3_avg <- mean(X3)
T1 <- soil_moisture$T1
T2 <- soil_moisture$T2
T3 <- soil_moisture$T3
T1_avg <- mean(T1)
T2_avg <- mean(T2)
T3_avg <- mean(T3)
soil_moisture$ubrmse_1 <- ((X1 - X1_avg) - (T1 - T1_avg))^2
soil_moisture$ubrmse_2 <- ((X2 - X2_avg) - (T2 - T2_avg))^2
soil_moisture$ubrmse_3 <- ((X3 - X3_avg) - (T3 - T3_avg))^2
print(paste("The unbiased RMSE for dataset 1 is", round(sqrt(mean(soil_moisture$ubrmse_1)), 3)),". This is expected given that it is the reference dataset.")
soil_moisture$T1 <- (X1 - a1) / B1
soil_moisture$T2 <- (X2 - a2) / B2
soil_moisture$T3 <- (X3 - a3) / B3
X1_avg <- mean(X1)
X2_avg <- mean(X2)
X3_avg <- mean(X3)
T1 <- soil_moisture$T1
T2 <- soil_moisture$T2
T3 <- soil_moisture$T3
T1_avg <- mean(T1)
T2_avg <- mean(T2)
T3_avg <- mean(T3)
soil_moisture$ubrmse_1 <- ((X1 - X1_avg) - (T1 - T1_avg))^2
soil_moisture$ubrmse_2 <- ((X2 - X2_avg) - (T2 - T2_avg))^2
soil_moisture$ubrmse_3 <- ((X3 - X3_avg) - (T3 - T3_avg))^2
print(paste("The unbiased RMSE for dataset 1 is", round(sqrt(mean(soil_moisture$ubrmse_1)), 3),"This is expected given that it is the reference dataset."))
print(paste("The unbiased RMSE for dataset 2 is", round(sqrt(mean(soil_moisture$ubrmse_2)), 3)))
print(paste("The unbiased RMSE for dataset 3 is", round(sqrt(mean(soil_moisture$ubrmse_3)), 3)))
soil_moisture$T1 <- (X1 - a1) / B1
soil_moisture$T2 <- (X2 - a2) / B2
soil_moisture$T3 <- (X3 - a3) / B3
X1_avg <- mean(X1)
X2_avg <- mean(X2)
X3_avg <- mean(X3)
T1 <- soil_moisture$T1
T2 <- soil_moisture$T2
T3 <- soil_moisture$T3
T1_avg <- mean(T1)
T2_avg <- mean(T2)
T3_avg <- mean(T3)
soil_moisture$ubrmse_1 <- ((X1 - X1_avg) - (T1 - T1_avg))^2
soil_moisture$ubrmse_2 <- ((X2 - X2_avg) - (T2 - T2_avg))^2
soil_moisture$ubrmse_3 <- ((X3 - X3_avg) - (T3 - T3_avg))^2
print(paste("The unbiased RMSE for dataset 1 is", round(sqrt(mean(soil_moisture$ubrmse_1)), 3),". This is expected given that it is the reference dataset."))
print(paste("The unbiased RMSE for dataset 2 is", round(sqrt(mean(soil_moisture$ubrmse_2)), 3)))
print(paste("The unbiased RMSE for dataset 3 is", round(sqrt(mean(soil_moisture$ubrmse_3)), 3)))
#get the random errors
e1 <- sqrt(cov(X1, X1) - ((cov(X1, X2)*cov(X1, X3))/(cov(X2, X3))))
e2 <- sqrt(cov(X2, X2) - ((cov(X1, X2)*cov(X2, X3))/(cov(X1, X3))))
e1 <- sqrt(cov(X3, X3) - ((cov(X1, X3)*cov(X2, X3))/(cov(X1, X2))))
# calculate our "True" value based off of equation where Xi(t) = a_i + BiT(t) + e_i(t)
soil_moisture$T1 <- (X1 - a1 - e1) / B1
soil_moisture$T2 <- (X2 - a2 - e2) / B2
soil_moisture$T3 <- (X3 - a3 - e3) / B3
#get the random errors
e1 <- sqrt(cov(X1, X1) - ((cov(X1, X2)*cov(X1, X3))/(cov(X2, X3))))
e2 <- sqrt(cov(X2, X2) - ((cov(X1, X2)*cov(X2, X3))/(cov(X1, X3))))
e3 <- sqrt(cov(X3, X3) - ((cov(X1, X3)*cov(X2, X3))/(cov(X1, X2))))
# calculate our "True" value based off of equation where Xi(t) = a_i + BiT(t) + e_i(t)
soil_moisture$T1 <- (X1 - a1 - e1) / B1
soil_moisture$T2 <- (X2 - a2 - e2) / B2
soil_moisture$T3 <- (X3 - a3 - e3) / B3
X1_avg <- mean(X1)
X2_avg <- mean(X2)
X3_avg <- mean(X3)
T1 <- soil_moisture$T1
T2 <- soil_moisture$T2
T3 <- soil_moisture$T3
T1_avg <- mean(T1)
T2_avg <- mean(T2)
T3_avg <- mean(T3)
soil_moisture$ubrmse_1 <- ((X1 - X1_avg) - (T1 - T1_avg))^2
soil_moisture$ubrmse_2 <- ((X2 - X2_avg) - (T2 - T2_avg))^2
soil_moisture$ubrmse_3 <- ((X3 - X3_avg) - (T3 - T3_avg))^2
print(paste("The unbiased RMSE for dataset 1 is", round(sqrt(mean(soil_moisture$ubrmse_1)), 3),". This is expected given that it is the reference dataset."))
print(paste("The unbiased RMSE for dataset 2 is", round(sqrt(mean(soil_moisture$ubrmse_2)), 3)))
print(paste("The unbiased RMSE for dataset 3 is", round(sqrt(mean(soil_moisture$ubrmse_3)), 3)))
e2
e3
P1 <- sqrt((cov(X1,X2)*cov(X, X3))/(cov(X1,X1)*cov(X2,X3)))
P1 <- sqrt((cov(X1,X2)*cov(X1, X3))/(cov(X1,X1)*cov(X2,X3)))
P1
P1 <- sqrt((cov(X1,X2)*cov(X1, X3))/(cov(X1,X1)*cov(X2,X3)))
P2_pos <- (cov(X1, X3)*cov(X2, X3))*(sqrt((cov(X1,X2)*cov(X2, X3))/(cov(X2,X2)*cov(X1,X3))))
P2_neg <- -(cov(X1, X3)*cov(X2, X3))*(sqrt((cov(X1,X2)*cov(X2, X3))/(cov(X2,X2)*cov(X1,X3))))
P2_neg
P2_pos
P1 <- sqrt((cov(X1,X2)*cov(X1, X3))/(cov(X1,X1)*cov(X2,X3)))
P2_pos <- (cov(X1, X3)*cov(X2, X3))*(sqrt((cov(X1,X2)*cov(X2, X3))/(cov(X2,X2)*cov(X1,X3))))
P2_neg <- -(cov(X1, X3)*cov(X2, X3))*(sqrt((cov(X1,X2)*cov(X2, X3))/(cov(X2,X2)*cov(X1,X3))))
P3_pos <- (cov(X1, X2)*cov(X2, X3))*(sqrt((cov(X1,X3)*cov(X2, X3))/(cov(X3,X3)*cov(X1,X2))))
P3_neg <- -(cov(X1, X2)*cov(X2, X3))*(sqrt((cov(X1,X3)*cov(X2, X3))/(cov(X3,X3)*cov(X1,X2))))
P3_neg
P3_pos
soil_moisture <- read.csv("Q2_soil_moisture.csv")
a1 <- 0
B1 <- 1
X1 <- soil_moisture$X1
X2 <- soil_moisture$X2
X3 <- soil_moisture$X3
B2 <- (cov(X2, X3))/(cov(X1, X3))
B3 <- (cov(X2, X3))/(cov(X1, X2))
a2 <- mean(X2) - (B2 * mean(X1))
a3 <- mean(X3) - (B3 * mean(X1))
#get the random errors
e1 <- sqrt(cov(X1, X1) - ((cov(X1, X2)*cov(X1, X3))/(cov(X2, X3))))
e2 <- sqrt(cov(X2, X2) - ((cov(X1, X2)*cov(X2, X3))/(cov(X1, X3))))
e3 <- sqrt(cov(X3, X3) - ((cov(X1, X3)*cov(X2, X3))/(cov(X1, X2))))
# calculate our "True" value based off of equation where Xi(t) = a_i + BiT(t) + e_i(t)
soil_moisture$T1 <- (X1 - a1 - e1) / B1
soil_moisture$T2 <- (X2 - a2 - e2) / B2
soil_moisture$T3 <- (X3 - a3 - e3) / B3
X1_avg <- mean(X1)
X2_avg <- mean(X2)
X3_avg <- mean(X3)
T1 <- soil_moisture$T1
T2 <- soil_moisture$T2
T3 <- soil_moisture$T3
T1_avg <- mean(T1)
T2_avg <- mean(T2)
T3_avg <- mean(T3)
soil_moisture$ubrmse_1 <- ((X1 - X1_avg) - (T1 - T1_avg))^2
soil_moisture$ubrmse_2 <- ((X2 - X2_avg) - (T2 - T2_avg))^2
soil_moisture$ubrmse_3 <- ((X3 - X3_avg) - (T3 - T3_avg))^2
soil_moisture <- read.csv("Q2_soil_moisture.csv")
a1 <- 0
B1 <- 1
X1 <- soil_moisture$X1
X2 <- soil_moisture$X2
X3 <- soil_moisture$X3
B2 <- (cov(X2, X3))/(cov(X1, X3))
B3 <- (cov(X2, X3))/(cov(X1, X2))
a2 <- mean(X2) - (B2 * mean(X1))
a3 <- mean(X3) - (B3 * mean(X1))
P2
P1 <- sqrt((cov(X1,X2)*cov(X1, X3))/(cov(X1,X1)*cov(X2,X3)))
P2 <- (cov(X1, X3)*cov(X2, X3))*(sqrt((cov(X1,X2)*cov(X2, X3))/(cov(X2,X2)*cov(X1,X3))))
P3 <- (cov(X1, X2)*cov(X2, X3))*(sqrt((cov(X1,X3)*cov(X2, X3))/(cov(X3,X3)*cov(X1,X2))))
p2
P2
(cov(X1, X3)*cov(X2, X3))
cov(X1, X3)
X3
head(soil_moisture)
cov(soil_moisture$X1, soil_moisture$X3)
cov(X1, X3)
mean(x1)
meanX1
mean(X1)
mean(X2)
mean(X3)
(sqrt((cov(X1,X2)*cov(X2, X3))/(cov(X2,X2)*cov(X1,X3)))
)
(sqrt((cov(X1,X3)*cov(X2, X3))/(cov(X3,X3)*cov(X1,X2)))
)
P1
P2
P3
(sqrt((cov(X1,X2)*cov(X2, X3))/(cov(X2,X2)*cov(X1,X3))))
sqrt((cov(X1,X2)*cov(X1, X3))/(cov(X1,X1)*cov(X2,X3)))
(sqrt((cov(X1,X3)*cov(X2, X3))/(cov(X3,X3)*cov(X1,X2))))
(cov(X1, X3)*cov(X2, X3))
P1 <- sqrt((cov(X1,X2)*cov(X1, X3))/(cov(X1,X1)*cov(X2,X3)))
P2 <- -(cov(X1, X3)*cov(X2, X3))*(sqrt((cov(X1,X2)*cov(X2, X3))/(cov(X2,X2)*cov(X1,X3))))
P3 <- (cov(X1, X2)*cov(X2, X3))*(sqrt((cov(X1,X3)*cov(X2, X3))/(cov(X3,X3)*cov(X1,X2))))
P2
P1 <- sqrt((cov(X1,X2)*cov(X1, X3))/(cov(X1,X1)*cov(X2,X3)))
P2 <- (-1 *(cov(X1, X3)*cov(X2, X3)))*(sqrt((cov(X1,X2)*cov(X2, X3))/(cov(X2,X2)*cov(X1,X3))))
P3 <- (cov(X1, X2)*cov(X2, X3))*(sqrt((cov(X1,X3)*cov(X2, X3))/(cov(X3,X3)*cov(X1,X2))))
P2
sign(56)
sign(-56)
sign(-564247329)
P1 <- sqrt((cov(X1,X2)*cov(X1, X3))/(cov(X1,X1)*cov(X2,X3)))
P2 <- sign(cov(X1, X3)*cov(X2, X3))*(sqrt((cov(X1,X2)*cov(X2, X3))/(cov(X2,X2)*cov(X1,X3))))
P3 <- sign(cov(X1, X2)*cov(X2, X3))*(sqrt((cov(X1,X3)*cov(X2, X3))/(cov(X3,X3)*cov(X1,X2))))
P2
P3
$ \epsilon ' $ as you move from Sandy loam to silty clay, $ \epsilon ' $ gets smaller for the same level of moisture, while $ \epsilon " $
-- a much smaller component--is pretty similar across the different
$ \epsilon " $
```{r, echo=TRUE}
exp(-tau/cos(theta))
tau <- .3
exp(-tau/cos(theta))
knitr::opts_chunk$set(echo = TRUE)
#Convert theta 35 degrees to radians
deg2rad <- function(deg) {(deg * pi) / (180)}
theta <- deg2rad(35)
w <- 0.05
Temp <- 20
h <- 0.13
tau <- 0.3
e <- 4
r_h_top <- cos(theta) - sqrt(e - (sin(theta)^2))
r_h_bottom <- cos(theta) + sqrt(e - (sin(theta)^2))
r_h <- abs(r_h_top/r_h_bottom)^2
r_h_rough <- r_h*exp(-h * cos(theta))
T_b_h = exp(-tau/cos(theta))
exp(-tau/cos(theta))
exp(-tau/(cos(theta))
)
#Convert theta 35 degrees to radians
deg2rad <- function(deg) {(deg * pi) / (180)}
theta <- deg2rad(35)
w <- 0.05
Temp <- 20
h <- 0.13
tau <- 0.3
e <- 4
r_h_top <- cos(theta) - sqrt(e - (sin(theta)^2))
r_h_bottom <- cos(theta) + sqrt(e - (sin(theta)^2))
r_h <- abs(r_h_top/r_h_bottom)^2
r_h_rough <- r_h*exp(-h * cos(theta))
T_b_h = (exp(-tau/cos(theta)) * (1 - r_h_rough) * T) + ((1-w) * (1 - exp(-tau/cos(theta))) * (1 + (r_h_rough*exp(-tau/cos(theta)))) * T)
T_b_h
r_h_rough
r_h
theta
?cos
theta
cos(theta)
sqrt(e - (sin(theta)^2)
)
r_h_top
r_h_n
r_h_b
r_h_bottom
abs(r_h_top/r_h_bottom)
.4^2
r_h_rough
ex <- exp(-tau/cos(theta))
(ex * (1 - r_h_rough) * T)
ex
tau
cos(theta)
-tau/cos(theta)
exp(-.366)
T_b_h = ex * (1 - r_h_rough) * T + (1-w) * (1 - ex) * (1 + (r_h_rough*ex)) * T
T_b_h
r_h_rough*ex
r_h_rough*ex+1
#Convert theta 35 degrees to radians
deg2rad <- function(deg) {(deg * pi) / (180)}
theta <- deg2rad(35)
w <- 0.05
Temp <- 20
h <- 0.13
tau <- 0.3
e <- 4
r_h_top <- cos(theta) - sqrt(e - (sin(theta)^2))
r_h_bottom <- cos(theta) + sqrt(e - (sin(theta)^2))
r_h <- abs(r_h_top/r_h_bottom)^2
r_h_rough <- r_h*exp(-h * cos(theta))
ex <- exp(-tau/cos(theta))
T_b_h = (ex * (1 - r_h_rough) * Temp) + (1-w) * (1 - ex) * (1 + (r_h_rough*ex)) * Temp
T_b_h
#Convert theta 35 degrees to radians
deg2rad <- function(deg) {(deg * pi) / (180)}
theta <- deg2rad(35)
w <- 0.05
Temp <- 293.15 #this is from 20 celcius to kelvin
h <- 0.13
tau <- 0.3
e <- 4
r_h_top <- cos(theta) - sqrt(e - (sin(theta)^2))
r_h_bottom <- cos(theta) + sqrt(e - (sin(theta)^2))
r_h <- abs(r_h_top/r_h_bottom)^2
r_h_rough <- r_h*exp(-h * cos(theta))
ex <- exp(-tau/cos(theta))
T_b_h = (ex * (1 - r_h_rough) * Temp) + (1-w) * (1 - ex) * (1 + (r_h_rough*ex)) * Temp
T_b_h
#Convert theta 35 degrees to radians
deg2rad <- function(deg) {(deg * pi) / (180)}
theta <- deg2rad(35)
w <- 0.05
Temp <- 293.15 #this is from 20 celcius to kelvin
h <- 0.13
tau <- 0.3
e <- 4
r_h_top <- cos(theta) - sqrt(e - (sin(theta)^2))
r_h_bottom <- cos(theta) + sqrt(e - (sin(theta)^2))
r_h <- abs(r_h_top/r_h_bottom)^2
r_h_rough <- r_h*exp(-h * cos(theta))
ex <- exp(-tau/cos(theta))
T_b_h = (ex * (1 - r_h_rough) * Temp) + (1-w) * (1 - ex) * (1 + (r_h_rough*ex)) * Temp
T_b_h
ex
ex
ex*Temp
1-w
(1-w)*(1-ex)*Temp
1-.28
View(comb)
View(decrease_decomp)
View(comb)
ifelse(dir.exists("~/Box Sync/heatwave_covid"),
setwd("~/Box Sync/heatwave_covid"),
setwd("/oak/stanford/groups/omramom/group_members/aminaly/heatwave_covid"))
source("./regression_functions_shelter.R")
library(dplyr)
library(lfe)
library(ggplot2)
library(dotwhisker)
library(tidyverse)
library(lubridate)
library(reshape2)
library(stringr)
library(broom)
library(gridExtra)
library(wesanderson)
library(SafeGraphR)
library(interactions)
## read in the regression data
data <- readRDS("./heatwaves_manual/data_for_regression.rds")
data_1 <- data %>% filter(year %in% c(2018,2019))
data_2 <- data %>% filter(year == 2020)
min(data_1$xvar)
head(data)
data <- rename(data, xvar = mean_high_c)
data <- rename(data, yvar = visitors_percap)
#separate the two datasets
data_1 <- data %>% filter(year %in% c(2018,2019))
data_2 <- data %>% filter(year == 2020)
min(data_1$xvar)
min(data_2$xvar)
d <- filter(data_1$xvar < 10)
d <- data %>% filter(data_1$xvar < 10)
d <- data %>% filter(xvar < 10)
nrow(d)
head(D)
head(D)
head(d)
unique(d$year)
d <- data %>% filter(xvar < 10 & year == 2020)
d
unique(d$xvar)
d <- data %>% filter(xvar > 40)
unique(d$year)
d <- data %>% filter(xvar > 35)
unique(d$year)
seq(10, 35, 5)
LVL <- "bin"
BINS <- 8
data <- data %>% mutate(xvar_bin = cut(xvar, breaks = c(0, seq(10, 35, 5), Inf), labels = F)) %>%
mutate(xvar_bin = factor(xvar_bin, levels = as.character(1:BINS))) %>% filter(!is.na(xvar_bin))
#separate the two datasets
data_1 <- data %>% filter(year %in% c(2018,2019))
data_2 <- data %>% filter(year == 2020)
unique(data_1$xvar_bin)
unique(data_2$xvar_bin)
LVL <- "bin"
BINS <- 7
data <- data %>% mutate(xvar_bin = cut(xvar, breaks = c(-Inf, seq(10, 35, 5), Inf), labels = F)) %>%
mutate(xvar_bin = factor(xvar_bin, levels = as.character(1:BINS))) %>% filter(!is.na(xvar_bin))
#separate the two datasets
data_1 <- data %>% filter(year %in% c(2018,2019))
data_2 <- data %>% filter(year == 2020)
unique(data_2$xvar_bin)
unique(data_1$xvar_bin)
head(data_!)
head(data_1)
temp_mobility_data <- read_rds("./heatwaves_manual/data_for_regression.rds")
head(temp_mobility_data)
## combine zoning with mobility data
temp_mobility_data_sm <- temp_mobility_data %>% select(cbg = census_block_group, date,
yvar = visitors_percap, year, month = month.x, fips)
## zoning and mobility average for 2020
temp_mobility_2020 <- temp_mobility_data_sm %>% filter(year == 2020) %>%
group_by(cbg) %>% summarise(visitors_percap = mean(visitors_percap, na.rm = T))
## zoning and mobility average for 2020
temp_mobility_2020 <- temp_mobility_data_sm %>% filter(year == 2020) %>%
group_by(cbg) %>% summarise(yvar = mean(yvar, na.rm = T))
## zoning and mobility average for summer 2020
temp_mobility_summer_2020 <- temp_mobility_data_sm %>%
filter(year == 2020 & month %in% c(5:9)) %>%
group_by(cbg) %>% summarise(yvar = mean(yvar, na.rm = T))
head(data)
head(data %>% filter(xvar_bin == 1))
## plot binned data for 2018/19 summer only
data_summer <- data %>% filter(between(month.x, 5, 9))
min(data_summer$xvar)
max(data_summer$xvar)
data_summer %>% mutate(xvar_bin = cut(xvar, breaks = c(-Inf, seq(15, 40, 5), Inf), labels = F)) %>%
mutate(xvar_bin = factor(xvar_bin, levels = as.character(1:BINS))) %>% filter(!is.na(xvar_bin))
ds <- data_summer %>% mutate(xvar_bin = cut(xvar, breaks = c(-Inf, seq(15, 40, 5), Inf), labels = F)) %>%
mutate(xvar_bin = factor(xvar_bin, levels = as.character(1:BINS))) %>% filter(!is.na(xvar_bin))
head(ds)
unique(ds$xvar_bin)
ds %>% filter(xvar > 40)
ds %>% filter(xvar > 40 & year < 2020)
ds %>% filter(xvar > 35 & year < 2020)
temp_mobility_data_sm
zoning_cbg <- read_rds("./heatwaves_manual/BayAreaZoning/data/shapefile/zoning_cbg.rds")
head(zoning_cbg)
#### prep data
zoning_cbg$cbg <- paste0(zoning_cbg$STATEFP, zoning_cbg$COUNTYFP, zoning_cbg$TRACTCE, zoning_cbg$BLKGRPCE)
zoning_cbg_summary <- zoning_cbg %>% filter(zoning %in% c(0:3)) %>% group_by(cbg) %>%
summarize(non_res = sum(zoning == 0)/length(zoning),
multi = sum(zoning == 2)/length(zoning),
single = sum(zoning == 1)/length(zoning),
non_dev = sum(zoning == 3)/length(zoning))
head(zoning_cbg_summary)
