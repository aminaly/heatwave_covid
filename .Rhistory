X1 <- soil_moisture$X1
X2 <- soil_moisture$X2
X3 <- soil_moisture$X3
B2 <- (cov(X2, X3))/(cov(X1, X3))
B3 <- (cov(X2, X3))/(cov(X1, X2))
a2 <- mean(X2) - (B2 * mean(X1))
a3 <- mean(X3) - (B3 * mean(X1))
#get the random errors
e1 <- sqrt(cov(X1, X1) - ((cov(X1, X2)*cov(X1, X3))/(cov(X2, X3))))
e2 <- sqrt(cov(X2, X2) - ((cov(X1, X2)*cov(X2, X3))/(cov(X1, X3))))
e3 <- sqrt(cov(X3, X3) - ((cov(X1, X3)*cov(X2, X3))/(cov(X1, X2))))
# calculate our "True" value based off of equation where Xi(t) = a_i + BiT(t) + e_i(t)
soil_moisture$T1 <- (X1 - a1 - e1) / B1
soil_moisture$T2 <- (X2 - a2 - e2) / B2
soil_moisture$T3 <- (X3 - a3 - e3) / B3
X1_avg <- mean(X1)
X2_avg <- mean(X2)
X3_avg <- mean(X3)
T1 <- soil_moisture$T1
T2 <- soil_moisture$T2
T3 <- soil_moisture$T3
T1_avg <- mean(T1)
T2_avg <- mean(T2)
T3_avg <- mean(T3)
soil_moisture$ubrmse_1 <- ((X1 - X1_avg) - (T1 - T1_avg))^2
soil_moisture$ubrmse_2 <- ((X2 - X2_avg) - (T2 - T2_avg))^2
soil_moisture$ubrmse_3 <- ((X3 - X3_avg) - (T3 - T3_avg))^2
soil_moisture <- read.csv("Q2_soil_moisture.csv")
a1 <- 0
B1 <- 1
X1 <- soil_moisture$X1
X2 <- soil_moisture$X2
X3 <- soil_moisture$X3
B2 <- (cov(X2, X3))/(cov(X1, X3))
B3 <- (cov(X2, X3))/(cov(X1, X2))
a2 <- mean(X2) - (B2 * mean(X1))
a3 <- mean(X3) - (B3 * mean(X1))
P2
P1 <- sqrt((cov(X1,X2)*cov(X1, X3))/(cov(X1,X1)*cov(X2,X3)))
P2 <- (cov(X1, X3)*cov(X2, X3))*(sqrt((cov(X1,X2)*cov(X2, X3))/(cov(X2,X2)*cov(X1,X3))))
P3 <- (cov(X1, X2)*cov(X2, X3))*(sqrt((cov(X1,X3)*cov(X2, X3))/(cov(X3,X3)*cov(X1,X2))))
p2
P2
(cov(X1, X3)*cov(X2, X3))
cov(X1, X3)
X3
head(soil_moisture)
cov(soil_moisture$X1, soil_moisture$X3)
cov(X1, X3)
mean(x1)
meanX1
mean(X1)
mean(X2)
mean(X3)
(sqrt((cov(X1,X2)*cov(X2, X3))/(cov(X2,X2)*cov(X1,X3)))
)
(sqrt((cov(X1,X3)*cov(X2, X3))/(cov(X3,X3)*cov(X1,X2)))
)
P1
P2
P3
(sqrt((cov(X1,X2)*cov(X2, X3))/(cov(X2,X2)*cov(X1,X3))))
sqrt((cov(X1,X2)*cov(X1, X3))/(cov(X1,X1)*cov(X2,X3)))
(sqrt((cov(X1,X3)*cov(X2, X3))/(cov(X3,X3)*cov(X1,X2))))
(cov(X1, X3)*cov(X2, X3))
P1 <- sqrt((cov(X1,X2)*cov(X1, X3))/(cov(X1,X1)*cov(X2,X3)))
P2 <- -(cov(X1, X3)*cov(X2, X3))*(sqrt((cov(X1,X2)*cov(X2, X3))/(cov(X2,X2)*cov(X1,X3))))
P3 <- (cov(X1, X2)*cov(X2, X3))*(sqrt((cov(X1,X3)*cov(X2, X3))/(cov(X3,X3)*cov(X1,X2))))
P2
P1 <- sqrt((cov(X1,X2)*cov(X1, X3))/(cov(X1,X1)*cov(X2,X3)))
P2 <- (-1 *(cov(X1, X3)*cov(X2, X3)))*(sqrt((cov(X1,X2)*cov(X2, X3))/(cov(X2,X2)*cov(X1,X3))))
P3 <- (cov(X1, X2)*cov(X2, X3))*(sqrt((cov(X1,X3)*cov(X2, X3))/(cov(X3,X3)*cov(X1,X2))))
P2
sign(56)
sign(-56)
sign(-564247329)
P1 <- sqrt((cov(X1,X2)*cov(X1, X3))/(cov(X1,X1)*cov(X2,X3)))
P2 <- sign(cov(X1, X3)*cov(X2, X3))*(sqrt((cov(X1,X2)*cov(X2, X3))/(cov(X2,X2)*cov(X1,X3))))
P3 <- sign(cov(X1, X2)*cov(X2, X3))*(sqrt((cov(X1,X3)*cov(X2, X3))/(cov(X3,X3)*cov(X1,X2))))
P2
P3
$ \epsilon ' $ as you move from Sandy loam to silty clay, $ \epsilon ' $ gets smaller for the same level of moisture, while $ \epsilon " $
-- a much smaller component--is pretty similar across the different
$ \epsilon " $
```{r, echo=TRUE}
exp(-tau/cos(theta))
tau <- .3
exp(-tau/cos(theta))
knitr::opts_chunk$set(echo = TRUE)
#Convert theta 35 degrees to radians
deg2rad <- function(deg) {(deg * pi) / (180)}
theta <- deg2rad(35)
w <- 0.05
Temp <- 20
h <- 0.13
tau <- 0.3
e <- 4
r_h_top <- cos(theta) - sqrt(e - (sin(theta)^2))
r_h_bottom <- cos(theta) + sqrt(e - (sin(theta)^2))
r_h <- abs(r_h_top/r_h_bottom)^2
r_h_rough <- r_h*exp(-h * cos(theta))
T_b_h = exp(-tau/cos(theta))
exp(-tau/cos(theta))
exp(-tau/(cos(theta))
)
#Convert theta 35 degrees to radians
deg2rad <- function(deg) {(deg * pi) / (180)}
theta <- deg2rad(35)
w <- 0.05
Temp <- 20
h <- 0.13
tau <- 0.3
e <- 4
r_h_top <- cos(theta) - sqrt(e - (sin(theta)^2))
r_h_bottom <- cos(theta) + sqrt(e - (sin(theta)^2))
r_h <- abs(r_h_top/r_h_bottom)^2
r_h_rough <- r_h*exp(-h * cos(theta))
T_b_h = (exp(-tau/cos(theta)) * (1 - r_h_rough) * T) + ((1-w) * (1 - exp(-tau/cos(theta))) * (1 + (r_h_rough*exp(-tau/cos(theta)))) * T)
T_b_h
r_h_rough
r_h
theta
?cos
theta
cos(theta)
sqrt(e - (sin(theta)^2)
)
r_h_top
r_h_n
r_h_b
r_h_bottom
abs(r_h_top/r_h_bottom)
.4^2
r_h_rough
ex <- exp(-tau/cos(theta))
(ex * (1 - r_h_rough) * T)
ex
tau
cos(theta)
-tau/cos(theta)
exp(-.366)
T_b_h = ex * (1 - r_h_rough) * T + (1-w) * (1 - ex) * (1 + (r_h_rough*ex)) * T
T_b_h
r_h_rough*ex
r_h_rough*ex+1
#Convert theta 35 degrees to radians
deg2rad <- function(deg) {(deg * pi) / (180)}
theta <- deg2rad(35)
w <- 0.05
Temp <- 20
h <- 0.13
tau <- 0.3
e <- 4
r_h_top <- cos(theta) - sqrt(e - (sin(theta)^2))
r_h_bottom <- cos(theta) + sqrt(e - (sin(theta)^2))
r_h <- abs(r_h_top/r_h_bottom)^2
r_h_rough <- r_h*exp(-h * cos(theta))
ex <- exp(-tau/cos(theta))
T_b_h = (ex * (1 - r_h_rough) * Temp) + (1-w) * (1 - ex) * (1 + (r_h_rough*ex)) * Temp
T_b_h
#Convert theta 35 degrees to radians
deg2rad <- function(deg) {(deg * pi) / (180)}
theta <- deg2rad(35)
w <- 0.05
Temp <- 293.15 #this is from 20 celcius to kelvin
h <- 0.13
tau <- 0.3
e <- 4
r_h_top <- cos(theta) - sqrt(e - (sin(theta)^2))
r_h_bottom <- cos(theta) + sqrt(e - (sin(theta)^2))
r_h <- abs(r_h_top/r_h_bottom)^2
r_h_rough <- r_h*exp(-h * cos(theta))
ex <- exp(-tau/cos(theta))
T_b_h = (ex * (1 - r_h_rough) * Temp) + (1-w) * (1 - ex) * (1 + (r_h_rough*ex)) * Temp
T_b_h
#Convert theta 35 degrees to radians
deg2rad <- function(deg) {(deg * pi) / (180)}
theta <- deg2rad(35)
w <- 0.05
Temp <- 293.15 #this is from 20 celcius to kelvin
h <- 0.13
tau <- 0.3
e <- 4
r_h_top <- cos(theta) - sqrt(e - (sin(theta)^2))
r_h_bottom <- cos(theta) + sqrt(e - (sin(theta)^2))
r_h <- abs(r_h_top/r_h_bottom)^2
r_h_rough <- r_h*exp(-h * cos(theta))
ex <- exp(-tau/cos(theta))
T_b_h = (ex * (1 - r_h_rough) * Temp) + (1-w) * (1 - ex) * (1 + (r_h_rough*ex)) * Temp
T_b_h
ex
ex
ex*Temp
1-w
(1-w)*(1-ex)*Temp
1-.28
ifelse(dir.exists("~/Box Sync/heatwave_covid"),
setwd("~/Box Sync/heatwave_covid"),
setwd("/oak/stanford/groups/omramom/group_members/aminaly/heatwave_covid"))
library(dplyr)
library(tidyverse)
library(lubridate)
library(reshape2)
temps <- read_rds("./heatwaves_manual/all_temperature_data_long.rds")
temps <- read_rds("./heatwaves_manual/all_temperature_data_long.RDS")
temps <- read_rds("./heatwaves_manual/all_temp_data_long.rds")
head(temps)
#reshape by with min and max next to each other
tm <- temps %>% dplyr::filter(measure == "tmmn")
tx <- temps %>% dplyr::filter(measure == "tmmx")
t <- left_join(tm, tx, by = c("date", "fips"))
#Add additional columns and rename for ease
t <- t %>% dplyr::select(date, county = county.x, fips,
mean_low = mean_measure.x,
mean_high = mean_measure.y) %>%
mutate(fips = as.character(fips), month = month(date), year = year(date)) %>%
dplyr::filter(is.finite(mean_low)) %>%
dplyr::filter(is.finite(mean_high))
t$monthyear <- paste0(t$month, t$year)
saveRDS(t, "./heatwaves_manual/all_temperature_data_clean.rds")
??AIC
ifelse(dir.exists("~/Box Sync/heatwave_covid"),
setwd("~/Box Sync/heatwave_covid"),
setwd("/oak/stanford/groups/omramom/group_members/aminaly/heatwave_covid"))
source("./regression_functions.R")
library(dplyr)
library(lfe)
library(ggplot2)
library(dotwhisker)
library(tidyverse)
library(lubridate)
library(reshape2)
##Read in datasets
t <- read_rds(paste0(getwd(), "/heatwaves_manual/all_temperature_data_clean.rds"))
m <- read_rds(paste0(getwd(), "/calculated/all_mortality.rds"))
#get the 300 counties with the highest populations
m_pops <- m %>% group_by(fips) %>% summarise(population = mean(as.numeric(population_est))) %>% arrange(desc(population))
m_pops <- m_pops[1:300,]
m <- m %>% dplyr::filter(fips %in% m_pops$fips)
## Recalculate z-scores for just the summer months and add in percentile value
t_zs <- t %>% group_by(fips, month) %>%
dplyr::filter(between(month, 5, 9)) %>%
mutate(z_score_high = (mean_high - mean(mean_high)) / sd(mean_high)) %>%
mutate(z_score_low = (mean_low - mean(mean_low)) / sd(mean_low)) %>%
mutate(p_high = pnorm(z_score_high)) %>%
mutate(p_low = pnorm(z_score_low)) %>%
ungroup
#Function to output a plot with the regression and 95% confidence interval
plot_regs <- function(data, coefs, title, level, xlabel = "Temperature (C)", ylabel = "Mortality", model) {
coefs <- coefs[[1]]
max_val <- max(data$measure, na.rm = T)
min_val <- min(data$measure, na.rm = T)
x = min_val:max_val ###this should be the max SWE we see
bts <- matrix(nrow=100,ncol=length(x))
#get all my y values
if (level == 1) {
for (j in 1:100) {
yy <- x*coefs[j]
yy <- yy - yy[x=1] ## this x value should be the average swe. Otherwise we can just set it to the first yy value
bts[j,] <- yy
}
} else if (level == 2) {
for (j in 1:100) {
yy <- x*coefs[j,1] + x^2*coefs[j,2]
yy <- yy - yy[x=1]
bts[j,] <- yy
}
} else if (level == 3) {
for (j in 1:100) {
yy <- x*coefs[j,1] + x^2*coefs[j,2] + x^3*coefs[j,3]
yy <- yy - yy[x=1]
bts[j,] <- yy
}
}
#figure out the 95 and 5 percentiles of the bootstraps
confint <- apply(bts,2,function(x) quantile(x,probs=c(0.05,0.5,0.95), na.rm = T))
#plot median estimate among the bootstraps
plot(x, confint[2,], type = "l", las=1,xlab=xlabel,ylab=ylabel,
ylim = c(min(confint[2,])*1.5, max(confint[2,])*1.5), col="navy", main=title)
#plot confidence intervals
polygon(c(x,rev(x)),c(confint[1,],rev(confint[3,])),col=adjustcolor("navy", alpha=.3),border = NA)
rug(data$measure, side = 1, col=adjustcolor("black", alpha = 0.05))
#Get the R^2, p-val, and AIC value
r <-
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n',
main = title)
text(x = 0.5, y = 0.5, paste(title, "No Ideal Model"), cex = 1.6, col = "black")
}
## Per Capita Deaths, summer months, num days where avg high temp in county is above 90th percentile
t_high <- t_zs %>% group_by(county, fips, month, year, monthyear) %>%
summarize(num_90 = sum(p_high >= 0.9))
data <- left_join(m, t_high, by = c("fips", "month", "year"))
data <- data %>%
group_by(fips, measure = num_90, monthyear, county = county.x, income_group, population_est) %>%
summarise(deaths = sum(deaths, na.rm = T)) %>%
dplyr::filter(is.finite(measure)) %>%
mutate(deaths = (deaths/as.numeric(population_est))*100000)
data <- na.omit(data)
plot_title <- "Deaths per 100K + #Days high >90P"
#Function to output a plot with the regression and 95% confidence interval
plot_regs <- function(data, coefs, title, level, xlabel = "Temperature (C)", ylabel = "Mortality", model) {
coefs <- coefs[[1]]
max_val <- max(data$measure, na.rm = T)
min_val <- min(data$measure, na.rm = T)
x = min_val:max_val ###this should be the max SWE we see
bts <- matrix(nrow=100,ncol=length(x))
#get all my y values
if (level == 1) {
for (j in 1:100) {
yy <- x*coefs[j]
yy <- yy - yy[x=1] ## this x value should be the average swe. Otherwise we can just set it to the first yy value
bts[j,] <- yy
}
} else if (level == 2) {
for (j in 1:100) {
yy <- x*coefs[j,1] + x^2*coefs[j,2]
yy <- yy - yy[x=1]
bts[j,] <- yy
}
} else if (level == 3) {
for (j in 1:100) {
yy <- x*coefs[j,1] + x^2*coefs[j,2] + x^3*coefs[j,3]
yy <- yy - yy[x=1]
bts[j,] <- yy
}
}
#figure out the 95 and 5 percentiles of the bootstraps
confint <- apply(bts,2,function(x) quantile(x,probs=c(0.05,0.5,0.95), na.rm = T))
#plot median estimate among the bootstraps
plot(x, confint[2,], type = "l", las=1,xlab=xlabel,ylab=ylabel,
ylim = c(min(confint[2,])*1.5, max(confint[2,])*1.5), col="navy", main=title)
#plot confidence intervals
polygon(c(x,rev(x)),c(confint[1,],rev(confint[3,])),col=adjustcolor("navy", alpha=.3),border = NA)
rug(data$measure, side = 1, col=adjustcolor("black", alpha = 0.05))
#Get the R^2, p-val, and AIC value
r <-
pval <-
aic <-
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n',
main = title)
text(x = 0.5, y = 0.5, paste("R^2 =", r,
"\n pval =", pval,
"\n AIC =", aic),
cex = 1.6, col = "black")
}
debug(plot_data)
debug(plot_regs)
plot_data <- function(data, plot_title) {
print(plot_title)
model <- fe_model(data, level = 2)
boots <- bootstrap_data(data, short=T, level=2)
plot_regs(data, boots, plot_title, level = 2, xlabel = "#Days @ or Above percentile", model)
data$deaths <- log(data$deaths)
model <- fe_model(data, level = 2)
boots <- bootstrap_data(data, short=T, level=2)
plot_regs(data, boots, plot_title, level = 2,xlabel = "#Days @ or Above percentile", ylabel = "Log Mortality", model)
}
plot_data(data, plot_title)
head(data)
tail(data)
min(data$monthyear)
max(data$monthyear)
confint()
confint
head(confint)
max(confint)
max(confint[2,])
plot(x, confint[2,], type = "l", las=1,xlab=xlabel,ylab=ylabel,
ylim = c(min(confint[2,])*1.5, max(confint[2,])*1.5), col="navy", main=title)
max(confint[2,])*1.5
min(confint[2,])*1.5
min(confint[2,])
plot(x, confint[2,], type = "l", las=1,xlab=xlabel,ylab=ylabel,
ylim = c(ymax, ymin), col="navy", main=title)
ymax <- max(confint[2,]) * 1.5
ymin <- min(confint[2,]) - 0.2
plot(x, confint[2,], type = "l", las=1,xlab=xlabel,ylab=
ylabel,
ylim = c(ymax, ymin), col="navy", main=title)
ylabel
ylabel <- "mortality"
ymax <- max(confint[2,]) * 1.5
ymin <- min(confint[2,]) - 0.2
plot(x, confint[2,], type = "l", las=1,xlab=xlabel,ylab=ylabel,
ylim = c(ymax, ymin), col="navy", main=title)
plot(x, confint[2,], type = "l", las=1,xlab=xlabel,ylab=ylabel,
ylim = c(min(confint[2,])*1.5, max(confint[2,])*1.5), col="navy", main=title)
polygon(c(x,rev(x)),c(confint[1,],rev(confint[3,])),col=adjustcolor("navy", alpha=.3),border = NA)
rug(data$measure, side = 1, col=adjustcolor("black", alpha = 0.05))
plot(x, confint[2,], type = "l", las=1,xlab=xlabel,ylab=ylabel,
ylim = c(min(confint[3,]), max(confint[1,])), col="navy", main=title)
#plot confidence intervals
polygon(c(x,rev(x)),c(confint[1,],rev(confint[3,])),col=adjustcolor("navy", alpha=.3),border = NA)
rug(data$measure, side = 1, col=adjustcolor("black", alpha = 0.05))
plot(x, confint[2,], type = "l", las=1,xlab=xlabel,ylab=ylabel,
ylim = c(min(confint[1,]), max(confint[3,])), col="navy", main=title)
#plot confidence intervals
polygon(c(x,rev(x)),c(confint[1,],rev(confint[3,])),col=adjustcolor("navy", alpha=.3),border = NA)
rug(data$measure, side = 1, col=adjustcolor("black", alpha = 0.05))
plot_data(data, plot_title)
Q
plot_data(data, plot_title)
model <- ylabel
ylabel <- "mortality"
plot(x, confint[2,], type = "l", las=1,xlab=xlabel,ylab=ylabel,
ylim = c(min(confint[1,]), max(confint[3,])), col="navy", main=title)
#plot confidence intervals
polygon(c(x,rev(x)),c(confint[1,],rev(confint[3,])),col=adjustcolor("navy", alpha=.3),border = NA)
rug(data$measure, side = 1, col=adjustcolor("black", alpha = 0.05))
summary(model)
names(summary(model))
names(summary(model)$coefficients)
summary(model)$coefficients
summary(model)$coefficients[4,]
summary(model)$coefficients[,4]
summary(model)$r.squared
summary(model)$pval
AIC(model)
r <- summary(model)$r.squared
pval <- summary(model)$coefficients[,4]
aic <- AIC(model)
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n',
main = title)
text(x = 0.5, y = 0.5, paste(title,
"\n R^2 =", r,
"\n pval =", pval,
"\n AIC =", aic),
cex = 1.6, col = "black")
r <- summary(model)$r.squared
pval <- summary(model)$coefficients[,4]
aic <- AIC(model)
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n',
main = title)
text(x = 0.5, y = 0.5, paste(title,
"\n R^2 =", r,
"\n pval =", pval[1,], pval[2,],
"\n AIC =", aic),
cex = 1.6, col = "black")
r <- summary(model)$r.squared
pval <- summary(model)$coefficients[,4]
aic <- AIC(model)
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n',
main = title)
text(x = 0.5, y = 0.5, paste(title,
"\n R^2 =", r,
"\n pval =", pval[,1], pval[,2],
"\n AIC =", aic),
cex = 1.6, col = "black")
r <- summary(model)$r.squared
pval <- summary(model)$coefficients[,4]
aic <- AIC(model)
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n',
main = title)
text(x = 0.5, y = 0.5, paste(title,
"\n R^2 =", r,
"\n pval =", pval[1], ",", pval[2],
"\n AIC =", aic),
cex = 1.6, col = "black")
r <- summary(model)$r.squared
pval <- summary(model)$coefficients[,4]
aic <- AIC(model)
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n',
main = title)
text(x = 0.5, y = 0.5, paste(title,
"\n R^2 =", r,
"\n pval =", pval[1], ",", pval[2],
"\n AIC =", aic),
cex = 1.6, col = "black")
r <- summary(model)$r.squared
pval <- summary(model)$coefficients[,4]
aic <- AIC(model)
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n',
main = title)
text(x = 0.5, y = 0.5, paste(title,
"\n R^2 =", r,
"\n pvals =", pval[1],
", \n", pval[2],
"\n AIC =", aic),
cex = 1.6, col = "black")
r <- summary(model)$r.squared
pval <- summary(model)$coefficients[,4]
aic <- AIC(model)
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n',
main = title)
text(x = 0.5, y = 0.5, paste(title,
"\n R^2 =", r,
"\n pvals =", round(pval[1],3),
", \n", round(pval[2],3),
"\n AIC =", aic),
cex = 1.6, col = "black")
r <- summary(model)$r.squared
pval <- summary(model)$coefficients[,4]
aic <- AIC(model)
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n',
main = title)
text(x = 0.5, y = 0.5, paste(title,
"\n R^2 =", r,
"\n pvals =", round(pval[1],3),
",", round(pval[2],3),
"\n AIC =", aic),
cex = 1.6, col = "black")
r <- summary(model)$r.squared
pval <- summary(model)$coefficients[,4]
aic <- AIC(model)
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n',
main = title)
text(x = 0.5, y = 0.5, paste(title,
"\n R^2 =", round(r, 3),
"\n pvals =", round(pval[1],3),
",", round(pval[2],3),
"\n AIC =", round(aic,3)),
cex = 1.6, col = "black")
