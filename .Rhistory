#pdf(paste0("../visuals/sample", Sys.Date(), ".pdf"))
## bar chart
ggplot(mt_country_results %>% filter(year == yr) %>%
filter(RangeName %in% unique(RangeName)[1:5]) %>%
gather(type, coverage, covered_kba:uncovered_kba) %>%
mutate(type = factor(type, levels = c('covered_kba', 'uncovered_kba'))),
aes(x = RangeName, y = coverage, group = type)) +
geom_bar(stat = "identity", aes(fill = type)) +
theme(legend.title = element_blank()) +
ggtitle("How much of KBA is covered")
mt_country_results <- mt_country_results %>% filter(COUNTRY ==country) %>%
mutate(covered_kba = cum_overlap, uncovered_kba = kba - covered_kba) %>%
##start sample pdf
#pdf(paste0("../visuals/sample", Sys.Date(), ".pdf"))
## bar chart
ggplot(mt_country_results %>% filter(year == yr) %>%
filter(RangeName %in% unique(RangeName)[1:5]) %>%
gather(type, coverage, covered_kba:uncovered_kba),
aes(x = RangeName, y = coverage, group = type)) +
geom_bar(stat = "identity", aes(fill = type)) +
theme(legend.title = element_blank()) +
ggtitle("How much of KBA is covered")
## bar chart
ggplot(mt_country_results %>% filter(year == yr) %>%
)
mt_country_results <- mt_country_results %>% filter(COUNTRY ==country) %>%
mutate(covered_kba = cum_overlap, uncovered_kba = kba - covered_kba) %>%
##start sample pdf
#pdf(paste0("../visuals/sample", Sys.Date(), ".pdf"))
## bar chart
ggplot(mt_country_results %>% filter(year == yr) %>%
filter(RangeName %in% unique(RangeName)[1:5]) %>%
gather(type, coverage, covered_kba:uncovered_kba) %>%
mutate(type = factor(type, levels = c('covered_kba', 'uncovered_kba'))),
aes(x = RangeName, y = coverage, group = type)) +
geom_bar(stat = "identity", aes(fill = type)) +
theme(legend.title = element_blank()) +
ggtitle("How much of KBA is covered")
a <- mt_country_results %>% filter(year == yr) %>%
filter(RangeName %in% unique(RangeName)[1:5]) %>%
gather(type, coverage, covered_kba:uncovered_kba) %>%
mutate(type = factor(type, levels = c('covered_kba', 'uncovered_kba')))
mt_country_results <- mt_country_results %>% filter(COUNTRY ==country) %>%
mutate(covered_kba = cum_overlap, uncovered_kba = kba - covered_kba) %>%
##start sample pdf
#pdf(paste0("../visuals/sample", Sys.Date(), ".pdf"))
## bar chart
ggplot(a,aes(x = RangeName, y = coverage, group = type)) +
geom_bar(stat = "identity", aes(fill = type)) +
theme(legend.title = element_blank()) +
ggtitle("How much of KBA is covered")
a
mt_country_results <- mt_country_results %>% filter(COUNTRY ==country) %>%
mutate(covered_kba = cum_overlap, uncovered_kba = kba - covered_kba) %>%
##start sample pdf
#pdf(paste0("../visuals/sample", Sys.Date(), ".pdf"))
## bar chart
ggplot(a, mapping=aes(x = RangeName, y = coverage, group = type)) +
geom_bar(stat = "identity", aes(fill = type)) +
theme(legend.title = element_blank()) +
ggtitle("How much of KBA is covered")
l
mt_country_results <- mt_country_results %>% filter(COUNTRY ==country) %>%
mutate(covered_kba = cum_overlap, uncovered_kba = kba - covered_kba) %>%
##start sample pdf
#pdf(paste0("../visuals/sample", Sys.Date(), ".pdf"))
## bar chart
ggplot(mt_country_results %>% filter(year == yr) %>%
filter(RangeName %in% unique(RangeName)[1:5]) %>%
gather(type, coverage, covered_kba:uncovered_kba) %>%
mutate(type = factor(type, levels = c('uncovered_kba', 'covered_kba'))),
mapping=aes(x = RangeName, y = coverage, group = type)) +
geom_bar(stat = "identity", aes(fill = type)) +
theme(legend.title = element_blank()) +
ggtitle("How much of KBA is covered")
mt_country_results <- mt_country_results %>% filter(COUNTRY ==country) %>%
mutate(covered_kba = cum_overlap, uncovered_kba = kba - covered_kba) %>%
##start sample pdf
#pdf(paste0("../visuals/sample", Sys.Date(), ".pdf"))
## bar chart
bar_data <-  mt_country_results %>% filter(year == yr) %>%
filter(RangeName %in% unique(RangeName)[1:5]) %>%
gather(type, coverage, covered_kba:uncovered_kba) %>%
mutate(type = factor(type, levels = c('uncovered_kba', 'covered_kba')))
mt_country_results <- read_csv("finaltab_basic_intersection_cummulative_mtrange_country.csv")
######## Pick year and country and filter ----
yr <- 2020
country <- "CHE"
mt_country_results <- mt_country_results %>% filter(COUNTRY ==country) %>%
mutate(covered_kba = cum_overlap, uncovered_kba = kba - covered_kba) %>%
mt_country_results <- mt_country_results %>% filter(COUNTRY ==country) %>%
mutate(covered_kba = cum_overlap, uncovered_kba = kba - covered_kba) %>%
##start sample pdf
#pdf(paste0("../visuals/sample", Sys.Date(), ".pdf"))
## bar chart
bar_data <-  mt_country_results %>% filter(year == yr) %>%
filter(RangeName %in% unique(RangeName)[1:5]) %>%
gather(type, coverage, covered_kba:uncovered_kba) %>%
mutate(type = factor(type, levels = c('uncovered_kba', 'covered_kba')))
mt_country_results <- read_csv("finaltab_basic_intersection_cummulative_mtrange_country.csv")
######## Pick year and country and filter ----
yr <- 2020
country <- "CHE"
mt_country_results <- mt_country_results %>% filter(COUNTRY ==country) %>%
mutate(covered_kba = cum_overlap, uncovered_kba = kba - covered_kba) %>%
mt_country_results
mt_country_results
mt_country_results <- mt_country_results %>% filter(COUNTRY ==country) %>%
mutate(covered_kba = cum_overlap, uncovered_kba = kba - covered_kba) %>%
##start sample pdf
#pdf(paste0("../visuals/sample", Sys.Date(), ".pdf"))
## bar chart
bar_data <-  mt_country_results %>% filter(year == yr) %>%
filter(RangeName %in% unique(RangeName)[1:5]) %>%
gather(type, coverage, covered_kba:uncovered_kba) %>%
mutate(type = factor(type, levels = c('uncovered_kba', 'covered_kba')))
mt_country_results <- mt_country_results %>% filter(COUNTRY ==country) %>%
mutate(covered_kba = cum_overlap, uncovered_kba = kba - covered_kba)
## bar chart
bar_data <-  mt_country_results %>% filter(year == yr) %>%
filter(RangeName %in% unique(RangeName)[1:5]) %>%
gather(type, coverage, covered_kba:uncovered_kba) %>%
mutate(type = factor(type, levels = c('uncovered_kba', 'covered_kba')))
ggplot(mt_country_results %>% filter(year == yr) %>%
filter(RangeName %in% unique(RangeName)[1:5]) %>%
gather(type, coverage, covered_kba:uncovered_kba) %>%
mutate(type = factor(type, levels = c('uncovered_kba', 'covered_kba'))),
mapping=aes(x = RangeName, y = coverage, group = type)) +
geom_bar(stat = "identity", aes(fill = type)) +
theme(legend.title = element_blank()) +
ggtitle("How much of KBA is covered")
## bar chart
ggplot(mt_country_results %>% filter(year == yr) %>%
filter(RangeName %in% unique(RangeName)[1:10]) %>%
gather(type, coverage, covered_kba:uncovered_kba) %>%
mutate(type = factor(type, levels = c('uncovered_kba', 'covered_kba'))),
mapping=aes(x = RangeName, y = coverage, group = type)) +
geom_bar(stat = "identity", aes(fill = type)) +
theme(legend.title = element_blank()) +
ggtitle("How much of KBA is covered")
## bar chart
ggplot(mt_country_results %>% filter(year == yr) %>%
filter(RangeName %in% unique(RangeName)[1:10]) %>%
gather(type, coverage, covered_kba:uncovered_kba) %>%
mutate(type = factor(type, levels = c('uncovered_kba', 'covered_kba'))),
mapping=aes(x = RangeName, y = coverage, group = type)) +
geom_bar(stat = "identity", aes(fill = type)) +
theme(legend.title = element_blank()) +
theme(axis.text.x=element_text(angle=90,hjust=1)) +
ggtitle("How much of KBA is covered")
## bar chart
ggplot(mt_country_results %>% filter(year == yr) %>%
filter(RangeName %in% unique(RangeName)[1:10]) %>%
gather(type, coverage, covered_kba:uncovered_kba) %>%
mutate(type = factor(type, levels = c('uncovered_kba', 'covered_kba'))),
mapping=aes(x = RangeName, y = coverage, group = type)) +
geom_bar(stat = "identity", aes(fill = type)) +
theme(legend.title = element_blank()) +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
ggtitle("How much of KBA is covered")
## bar chart
ggplot(mt_country_results %>% filter(year == yr) %>%
filter(RangeName %in% unique(RangeName)[1:10]) %>%
gather(type, coverage, covered_kba:uncovered_kba) %>%
mutate(type = factor(type, levels = c('uncovered_kba', 'covered_kba'))),
mapping=aes(x = RangeName, y = coverage, group = type)) +
geom_bar(stat = "identity", aes(fill = type)) +
theme(legend.title = element_blank()) +
theme(axis.text.x=element_text(angle=25,hjust=1)) +
ggtitle("How much of KBA is covered")
## line (by mountain)
ggplot(mt_country_results %>% filter(year > 1950) %>%
filter(RangeName %in% unique(RangeName)[1:10]),
aes(x = year, y = cum_percPA, group = RangeName)) +
geom_line(stat = "identity", aes(color = RangeName), show.legend = FALSE) +
theme(legend.title = element_blank()) +
ggtitle("Cummulative KBA Coverage by PAs")
## line (by mountain)
ggplot(mt_country_results %>% filter(year > 1950) %>%
filter(RangeName %in% unique(RangeName)[1:10]),
aes(x = year, y = cum_percPA, group = RangeName)) +
geom_line(stat = "identity", aes(color = RangeName)) +
theme(legend.title = element_blank()) +
ggtitle("Cummulative KBA Coverage by PAs")
## line (by mountain)
ggplot(mt_country_results %>% filter(year > 1950) %>%
filter(RangeName %in% unique(RangeName)[1:7]),
aes(x = year, y = cum_percPA, group = RangeName)) +
geom_line(stat = "identity", aes(color = RangeName)) +
theme(legend.title = element_blank()) +
ggtitle("Cummulative KBA Coverage by PAs")
## bar chart
ggplot(mt_country_results %>% filter(year == yr) %>%
filter(RangeName %in% unique(RangeName)[1:7]) %>%
gather(type, coverage, covered_kba:uncovered_kba) %>%
mutate(type = factor(type, levels = c('uncovered_kba', 'covered_kba'))),
mapping=aes(x = RangeName, y = coverage, group = type)) +
geom_bar(stat = "identity", aes(fill = type)) +
theme(legend.title = element_blank()) +
theme(axis.text.x=element_text(angle=25,hjust=1)) +
ggtitle("How much of KBA is covered")
## line (by mountain)
ggplot(mt_country_results %>% filter(year > 1950) %>%
filter(RangeName %in% unique(RangeName)[1:7]),
aes(x = year, y = cum_percPA, group = RangeName)) +
geom_line(stat = "identity", aes(color = RangeName)) +
theme(legend.title = element_blank()) +
ggtitle("Cummulative KBA Coverage by PAs")
results <- read_csv("finaltab_basic_Intersection_Oct2021.csv")
#### 2.1 Calculate full timeline with cumulative coverage ----
## Set 0 years to NA and NA ovl to 0
results <- results %>% mutate(year = ifelse(year == 0, NA, year),
ovl = ifelse(is.na(ovl), 0, ovl))
## create dataframe of all years with all ID vars
uniqids <- unique(results %>% select(SitRecID, DOMAIN, kba, RangeName, COUNTRY))
results_all_years <- merge(uniqids , c(min(results$year, na.rm = T):2020))
results_all_years <- results_all_years %>% rename(year = y)
## join with full_mt_run, get rid of NA years (those with issues calculating) ,
#and set NA ovl to 0 (no additional coverage that year)
results_all_years <- left_join(results_all_years, results %>% drop_na(year),
by = c(names(uniqids), "year"))
results_all_years <- results_all_years %>%
mutate(ovl = ifelse(is.na(ovl), 0, ovl)) %>%
select(-c(random, nPAs, range_countries,
multiple_ranges, all_gmba_intersec,note, percPA))
results_all_years_s <- results_all_years
head(results_all_years)
saveName <- "finaltab_basic_intersection_cummulative"
results <- read_csv("finaltab_basic_Intersection_Oct2021.csv")
#### 2.1 Calculate full timeline with cumulative coverage ----
## Set 0 years to NA and NA ovl to 0
results <- results %>% mutate(year = ifelse(year == 0, NA, year),
ovl = ifelse(is.na(ovl), 0, ovl))
## create dataframe of all years with all ID vars
uniqids <- unique(results %>% select(SitRecID, DOMAIN, kba, RangeName, COUNTRY))
results_all_years <- merge(uniqids , c(min(results$year, na.rm = T):2020))
results_all_years <- results_all_years %>% rename(year = y)
## join with full_mt_run, get rid of NA years (those with issues calculating) ,
#and set NA ovl to 0 (no additional coverage that year)
results_all_years <- left_join(results_all_years, results %>% drop_na(year),
by = c(names(uniqids), "year"))
results_all_years <- results_all_years %>%
mutate(ovl = ifelse(is.na(ovl), 0, ovl)) %>%
select(-c(random, nPAs, range_countries,
multiple_ranges, all_gmba_intersec,note, percPA))
## calculate cumulative coverage
results_all_years <- results_all_years  %>%
mutate(percPA = (ovl/kba) * 100) %>%
group_by(SitRecID, DOMAIN) %>%
mutate(cum_overlap = cumsum(ovl)) %>%
mutate(cum_percPA = (cum_overlap/kba) * 100)
results_all_years
## 4.1 Aggregate to intermediate level
intermediate_map <- read_csv("./data/GMBA_Inventory_v2_intermediate_map.csv")
## 4.1 Aggregate to intermediate level
intermediate_map <- read_csv("../data/GMBA_Inventory_v2_intermediate_map.csv")
head(intermediate_map)
intermediate_map <- rename(DOMAIN = GMBA_V2_ID)
intermediate_map <- rename(DOMAIN = GMBA_V2_ID)
intermediate_map <- intermediate_map %>% rename(DOMAIN = GMBA_V2_ID)
results_all_years <- left_join(results_all_years, intermediate_map, by = "DOMAIN")
head(results_all_years)
head(results_all_years)
head(results_all_years)
results_all_years_parentrange <- results_all_years %>%
group_by(year, ParentRange) %>%
summarize(mount_kba_area = sum(unique(kba), na.rm = T),
kba = sum(unique(kba), na.rm = T),
cum_overlap = sum(cum_overlap, na.rm = T)) %>%
mutate(cum_percPA = (cum_overlap/kba) * 100)
write.csv(results_all_years_parentrange, paste0(saveName, "_parentrange.csv"))
#### 4.3 Calculate mountain range AND country aggregation cumulative coverage ----
results_all_years_parentrange_country <- results_all_years %>%
group_by(year, COUNTRY, ParentRange) %>%
summarize(mount_kba_area = sum(unique(kba), na.rm = T),
kba = sum(unique(kba), na.rm = T),
cum_overlap = sum(cum_overlap, na.rm = T)) %>%
mutate(cum_percPA = (cum_overlap/kba) * 100)
write.csv(results_all_years_parentrange_country,
paste0(saveName, "_parentrange_country_avg.csv"))
head(finaltab_basic_cummulative.csv)
head(finaltab_basic_cummulative)
head(results_all_years)
nrow(results_all_years)
saveName <- "finaltab_basic_intersection_cummulative"
results <- read_csv("finaltab_basic_Intersection_Oct2021.csv")
#### 2.1 Calculate full timeline with cumulative coverage ----
## Set 0 years to NA and NA ovl to 0
results <- results %>% mutate(year = ifelse(year == 0, NA, year),
ovl = ifelse(is.na(ovl), 0, ovl))
## create dataframe of all years with all ID vars
uniqids <- unique(results %>% select(SitRecID, DOMAIN, kba, RangeName, COUNTRY))
results_all_years <- merge(uniqids , c(min(results$year, na.rm = T):2020))
results_all_years <- results_all_years %>% rename(year = y)
## join with full_mt_run, get rid of NA years (those with issues calculating) ,
#and set NA ovl to 0 (no additional coverage that year)
results_all_years <- left_join(results_all_years, results %>% drop_na(year),
by = c(names(uniqids), "year"))
results_all_years <- results_all_years %>%
mutate(ovl = ifelse(is.na(ovl), 0, ovl)) %>%
select(-c(random, nPAs, range_countries,
multiple_ranges, all_gmba_intersec,note, percPA))
## calculate cumulative coverage
results_all_years <- results_all_years  %>%
mutate(percPA = (ovl/kba) * 100) %>%
group_by(SitRecID, DOMAIN) %>%
mutate(cum_overlap = cumsum(ovl)) %>%
mutate(cum_percPA = (cum_overlap/kba) * 100)
write.csv(results_all_years, paste0(saveName, ".csv"))
#### 2.2 Calculate country aggregation cumulative coverage ----
results_all_years_country <- results_all_years %>%
group_by(year, COUNTRY) %>%
summarize(mount_kba_area = sum(unique(kba), na.rm = T),
kba = sum(unique(kba), na.rm = T),
cum_overlap = sum(cum_overlap, na.rm = T)) %>%
mutate(cum_percPA = (cum_overlap/kba) * 100)
write.csv(results_all_years_country, paste0(saveName, "_country.csv"))
#### 2.3 Calculate mountain range aggregation cumulative coverage ----
results_all_years_mtrange <- results_all_years %>%
group_by(year, DOMAIN, RangeName) %>%
summarize(mount_kba_area = sum(unique(kba), na.rm = T),
kba = sum(unique(kba), na.rm = T),
cum_overlap = sum(cum_overlap, na.rm = T)) %>%
mutate(cum_percPA = (cum_overlap/kba) * 100)
write.csv(results_all_years_mtrange, paste0(saveName, "_mtrange.csv"))
#### 2.4 Calculate mountain range AND country aggregation cumulative coverage ----
results_all_years_mtrange_country <- results_all_years %>%
group_by(year, COUNTRY, DOMAIN, RangeName) %>%
summarize(mount_kba_area = sum(unique(kba), na.rm = T),
kba = sum(unique(kba), na.rm = T),
cum_overlap = sum(cum_overlap, na.rm = T)) %>%
mutate(cum_percPA = (cum_overlap/kba) * 100)
write.csv(results_all_years_mtrange_country,
paste0(saveName, "_mtrange_country.csv"))
## 3.1 Calculate Average Coverage of KBAs in Country
results_all_years_country_avg <- results_all_years %>%
group_by(year, COUNTRY) %>%
summarize(mean(percPA, na.rm = T))
write.csv(results_all_years_country_avg,
paste0(saveName, "_country_avg.csv"))
## 3.2 Calculate Avg Coverage of KBAs in MT Range
results_all_years_mtrange_avg <- results_all_years %>%
group_by(year, DOMAIN, RangeName) %>%
summarize(mean(percPA, na.rm = T))
write.csv(results_all_years_mtrange_avg,
paste0(saveName, "_mtrange_avg.csv"))
## 3.3 Calculate Avg Coverage of KBAs in Country & MT Range
results_all_years_mtrange_country_avg <- results_all_years %>%
group_by(year, COUNTRY, DOMAIN, RangeName) %>%
summarize(mean(percPA, na.rm = T))
write.csv(results_all_years_mtrange_country_avg,
paste0(saveName, "_mtrange_country_avg.csv"))
## 4.1 Aggregate to intermediate level
intermediate_map <- read_csv("../data/GMBA_Inventory_v2_intermediate_map.csv")
intermediate_map <- intermediate_map %>% rename(DOMAIN = GMBA_V2_ID)
results_all_years <- left_join(results_all_years, intermediate_map, by = "DOMAIN")
#### 4.2 Calculate parent range aggregation cumulative coverage ----
results_all_years_parentrange <- results_all_years %>%
group_by(year, ParentRange) %>%
summarize(mount_kba_area = sum(unique(kba), na.rm = T),
kba = sum(unique(kba), na.rm = T),
cum_overlap = sum(cum_overlap, na.rm = T)) %>%
mutate(cum_percPA = (cum_overlap/kba) * 100)
write.csv(results_all_years_parentrange, paste0(saveName, "_parentrange.csv"))
#### 4.3 Calculate mountain range AND country aggregation cumulative coverage ----
results_all_years_parentrange_country <- results_all_years %>%
group_by(year, COUNTRY, ParentRange) %>%
summarize(mount_kba_area = sum(unique(kba), na.rm = T),
kba = sum(unique(kba), na.rm = T),
cum_overlap = sum(cum_overlap, na.rm = T)) %>%
mutate(cum_percPA = (cum_overlap/kba) * 100)
write.csv(results_all_years_parentrange_country,
paste0(saveName, "_parentrange_country_avg.csv"))
### Read in the results #TODO update this section
saveName <- "finaltab_basic_cummulative"
results <- read_csv("finaltab_basic_Oct2020.csv")
#### 2.1 Calculate full timeline with cumulative coverage ----
## Set 0 years to NA and NA ovl to 0
results <- results %>% mutate(year = ifelse(year == 0, NA, year),
ovl = ifelse(is.na(ovl), 0, ovl))
## create dataframe of all years with all ID vars
uniqids <- unique(results %>% select(SitRecID, DOMAIN, kba, RangeName, COUNTRY))
results_all_years <- merge(uniqids , c(min(results$year, na.rm = T):2020))
results_all_years <- results_all_years %>% rename(year = y)
## join with full_mt_run, get rid of NA years (those with issues calculating) ,
#and set NA ovl to 0 (no additional coverage that year)
results_all_years <- left_join(results_all_years, results %>% drop_na(year),
by = c(names(uniqids), "year"))
results_all_years <- results_all_years %>%
mutate(ovl = ifelse(is.na(ovl), 0, ovl)) %>%
select(-c(random, nPAs, range_countries,
multiple_ranges, all_gmba_intersec,note, percPA))
## calculate cumulative coverage
results_all_years <- results_all_years  %>%
mutate(percPA = (ovl/kba) * 100) %>%
group_by(SitRecID, DOMAIN) %>%
mutate(cum_overlap = cumsum(ovl)) %>%
mutate(cum_percPA = (cum_overlap/kba) * 100)
write.csv(results_all_years, paste0(saveName, ".csv"))
#### 2.2 Calculate country aggregation cumulative coverage ----
results_all_years_country <- results_all_years %>%
group_by(year, COUNTRY) %>%
summarize(mount_kba_area = sum(unique(kba), na.rm = T),
kba = sum(unique(kba), na.rm = T),
cum_overlap = sum(cum_overlap, na.rm = T)) %>%
mutate(cum_percPA = (cum_overlap/kba) * 100)
write.csv(results_all_years_country, paste0(saveName, "_country.csv"))
#### 2.3 Calculate mountain range aggregation cumulative coverage ----
results_all_years_mtrange <- results_all_years %>%
group_by(year, DOMAIN, RangeName) %>%
summarize(mount_kba_area = sum(unique(kba), na.rm = T),
kba = sum(unique(kba), na.rm = T),
cum_overlap = sum(cum_overlap, na.rm = T)) %>%
mutate(cum_percPA = (cum_overlap/kba) * 100)
write.csv(results_all_years_mtrange, paste0(saveName, "_mtrange.csv"))
#### 2.4 Calculate mountain range AND country aggregation cumulative coverage ----
results_all_years_mtrange_country <- results_all_years %>%
group_by(year, COUNTRY, DOMAIN, RangeName) %>%
summarize(mount_kba_area = sum(unique(kba), na.rm = T),
kba = sum(unique(kba), na.rm = T),
cum_overlap = sum(cum_overlap, na.rm = T)) %>%
mutate(cum_percPA = (cum_overlap/kba) * 100)
write.csv(results_all_years_mtrange_country,
paste0(saveName, "_mtrange_country.csv"))
## 3.1 Calculate Average Coverage of KBAs in Country
results_all_years_country_avg <- results_all_years %>%
group_by(year, COUNTRY) %>%
summarize(mean(percPA, na.rm = T))
write.csv(results_all_years_country_avg,
paste0(saveName, "_country_avg.csv"))
## 3.2 Calculate Avg Coverage of KBAs in MT Range
results_all_years_mtrange_avg <- results_all_years %>%
group_by(year, DOMAIN, RangeName) %>%
summarize(mean(percPA, na.rm = T))
write.csv(results_all_years_mtrange_avg,
paste0(saveName, "_mtrange_avg.csv"))
## 3.3 Calculate Avg Coverage of KBAs in Country & MT Range
results_all_years_mtrange_country_avg <- results_all_years %>%
group_by(year, COUNTRY, DOMAIN, RangeName) %>%
summarize(mean(percPA, na.rm = T))
write.csv(results_all_years_mtrange_country_avg,
paste0(saveName, "_mtrange_country_avg.csv"))
## 4.1 Aggregate to intermediate level
intermediate_map <- read_csv("../data/GMBA_Inventory_v2_intermediate_map.csv")
intermediate_map <- intermediate_map %>% rename(DOMAIN = GMBA_V2_ID)
results_all_years <- left_join(results_all_years, intermediate_map, by = "DOMAIN")
#### 4.2 Calculate parent range aggregation cumulative coverage ----
results_all_years_parentrange <- results_all_years %>%
group_by(year, ParentRange) %>%
summarize(mount_kba_area = sum(unique(kba), na.rm = T),
kba = sum(unique(kba), na.rm = T),
cum_overlap = sum(cum_overlap, na.rm = T)) %>%
mutate(cum_percPA = (cum_overlap/kba) * 100)
write.csv(results_all_years_parentrange, paste0(saveName, "_parentrange.csv"))
#### 4.3 Calculate mountain range AND country aggregation cumulative coverage ----
results_all_years_parentrange_country <- results_all_years %>%
group_by(year, COUNTRY, ParentRange) %>%
summarize(mount_kba_area = sum(unique(kba), na.rm = T),
kba = sum(unique(kba), na.rm = T),
cum_overlap = sum(cum_overlap, na.rm = T)) %>%
mutate(cum_percPA = (cum_overlap/kba) * 100)
write.csv(results_all_years_parentrange_country,
paste0(saveName, "_parentrange_country.csv"))
results_all_years
r <- filter(year > 1900 | ovl > 0 )
r <- results_all_years %>% filter(year > 1900 | ovl > 0 )
head(r)
nrow(r)
write.csv(r, paste0(saveName, ".csv"))
kbas <- kbas[kbas$Country != 'Disputed',]
head(tabmf)
# You will need 2 additional files: KBA classes and iso country codes
tabmf <- read.csv(paste(getwd(), "/data/KBA/kba_class_2020.csv", sep = ""))   ## file with types of kbas
## 4.4 Calculate Avg Coverage of KBAs in Parent Range
results_all_years_parentrange_avg <- results_all_years %>%
group_by(year, ParentRange) %>%
summarize(mean(percPA, na.rm = T))
write.csv(results_all_years_parentrange_avg,
paste0(saveName, "_parentrange_avg.csv"))
## 4.5 Calculate Avg Coverage of KBAs in Parent Range and COuntry
results_all_years_parentrange_country_avg <- results_all_years %>%
group_by(year, ParentRange, COUNTRY) %>%
summarize(mean(percPA, na.rm = T))
write.csv(results_all_years_parentrange_country_avg,
paste0(saveName, "_parentrange_country_avg.csv"))
# You will need 2 additional files: KBA classes and iso country codes
tabmf <- read.csv(paste(getwd(), "/data/KBA/kba_class_2020.csv", sep = ""))   ## file with types of kbas
## set the working directory
ifelse(dir.exists("~/Box Sync/mountain_biodiversity"),
setwd("~/Box Sync/mountain_biodiversity"),
setwd("/oak/stanford/groups/omramom/group_members/aminaly/mountain_biodiversity"))
# You will need 2 additional files: KBA classes and iso country codes
tabmf <- read.csv(paste(getwd(), "/data/KBA/kba_class_2020.csv", sep = ""))   ## file with types of kbas
head(tabmf)
head(kbas)
nrow(kbas)
ifelse(dir.exists("~/Box Sync/heatwave_covid"),
setwd("~/Box Sync/heatwave_covid"),
setwd("/oak/stanford/groups/omramom/group_members/aminaly/heatwave_covid"))
d <- readRDS("./heatwaves_manual/data_for_regression.rds")
head(d)
2019 <- d %>% filter(year == 2019)
first <- d %>% filter(year == 2019)
head(first)
first <- d %>% filter(year == 2019 & month.y %in% c(5:9))
head(first)
min(first$mean_high_c, na.rm = T)
max(first$mean_high_c, na.rm = T)
second <- d %>% filter(year == 2020 & month.y %in% c(5:9))
min(second$mean_high_c, na.rm = T)
max(second$mean_high_c, na.rm = T)
View(second)
