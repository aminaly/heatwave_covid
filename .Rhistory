} else if (level > 1) {
mod <- felm(deaths ~ poly(measure,level,raw=T) +
as.factor(state)*year + as.factor(region) * measure | fips + monthyear | 0 | fips + stateyear, data=dta)
}
#}
return(mod)
}
model <- fe_model(data, level = 2)
####Functions####
# Dta is the data
# Data must have the following columns: deaths, measure (temp), fips (county id), monthyear (pasted together)
fe_model <- function(dta, level, interact=F) {
dta <- na.omit(dta, cols=c("measure", "deaths"))
# if(interact) {
#   if (level == 1) {
#     mod <- felm(deaths ~ measure + measure:income_group | fips + monthyear, data=dta)
#   } else if (level == "log") {
#     mod <- felm(deaths ~ log(measure) + log(measure):income_group | fips + monthyear, data=dta )
#   } else if (level > 1) {
#     mod <- felm(deaths ~ poly(measure,level,raw=T) + measure:income_group | fips + monthyear, data=dta)
#   }
# } else {
if (level == 1) {
mod <- felm(deaths ~ measure | fips + monthyear, data=dta)
} else if (level == "log") {
mod <- felm(deaths ~ log(measure) | fips + monthyear, data=dta )
} else if (level > 1) {
mod <- felm(deaths ~ poly(measure,level,raw=T) +
as.factor(state)*year | fips + monthyear | 0 | fips + stateyear, data=dta)
}
#}
return(mod)
}
model <- fe_model(data, level = 2)
####Functions####
# Dta is the data
# Data must have the following columns: deaths, measure (temp), fips (county id), monthyear (pasted together)
fe_model <- function(dta, level, interact=F) {
dta <- na.omit(dta, cols=c("measure", "deaths"))
# if(interact) {
#   if (level == 1) {
#     mod <- felm(deaths ~ measure + measure:income_group | fips + monthyear, data=dta)
#   } else if (level == "log") {
#     mod <- felm(deaths ~ log(measure) + log(measure):income_group | fips + monthyear, data=dta )
#   } else if (level > 1) {
#     mod <- felm(deaths ~ poly(measure,level,raw=T) + measure:income_group | fips + monthyear, data=dta)
#   }
# } else {
if (level == 1) {
mod <- felm(deaths ~ measure | fips + monthyear, data=dta)
} else if (level == "log") {
mod <- felm(deaths ~ log(measure) | fips + monthyear, data=dta )
} else if (level > 1) {
mod <- felm(deaths ~ poly(measure,level,raw=T) +
as.factor(region)*year | fips + monthyear | 0 | fips + stateyear, data=dta)
}
#}
return(mod)
}
model <- fe_model(data, level = 2)
####Functions####
# Dta is the data
# Data must have the following columns: deaths, measure (temp), fips (county id), monthyear (pasted together)
fe_model <- function(dta, level, interact=F) {
dta <- na.omit(dta, cols=c("measure", "deaths"))
# if(interact) {
#   if (level == 1) {
#     mod <- felm(deaths ~ measure + measure:income_group | fips + monthyear, data=dta)
#   } else if (level == "log") {
#     mod <- felm(deaths ~ log(measure) + log(measure):income_group | fips + monthyear, data=dta )
#   } else if (level > 1) {
#     mod <- felm(deaths ~ poly(measure,level,raw=T) + measure:income_group | fips + monthyear, data=dta)
#   }
# } else {
if (level == 1) {
mod <- felm(deaths ~ measure | fips + monthyear, data=dta)
} else if (level == "log") {
mod <- felm(deaths ~ log(measure) | fips + monthyear, data=dta )
} else if (level > 1) {
mod <- felm(deaths ~ poly(measure,level,raw=T) +
as.factor(state)*year* region | fips + monthyear | 0 | fips + stateyear, data=dta)
}
#}
return(mod)
}
model <- fe_model(data, level = 2)
model
t <- read_rds(paste0(getwd(), "/heatwaves_manual/all_temperature_data_clean.rds"))
m_master <- read_rds(paste0(getwd(), "/calculated/all_mortality.rds"))
r_master <- read_csv(paste0(getwd(), "/us census/climate_regions.csv"))
#get the 300 counties with the highest populations
m_pops <- m_master %>% group_by(fips) %>% summarise(population = mean(as.numeric(population_est))) %>% arrange(desc(population))
m_pops <- m_pops[1:300,]
m_master <- m_master %>% dplyr::filter(fips %in% m_pops$fips)
m_master$state <- str_sub(m_master$county, -2)
m_master <- left_join(m_master, r_master, by= "state")
m_master <- m_master %>% filter(!is.na(region_s))
pdf(paste0("heatwaves_manual/visuals/regressions", Sys.Date(), ".pdf"))
##Finalize datasets for regressions & run
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n',
main = title)
text(x = 0.5, y = 0.5, paste(timestamp()),
cex = 1.5, col = "black")
##------ Mon Aug 24 17:54:19 2020 ------##
#####
##For this set of regressions, we're going to do per capita deaths, regular and log mortality,
## and only summmer months
## Recalculate z-scores for just the summer months and add in percentile value
t_zs <- t %>% group_by(fips, year) %>%
mutate(z_score_high = (mean_high - mean(mean_high)) / sd(mean_high)) %>%
mutate(z_score_low = (mean_low - mean(mean_low)) / sd(mean_low)) %>%
mutate(p_high = pnorm(z_score_high)) %>%
mutate(p_low = pnorm(z_score_low)) %>%
ungroup
## Per Capita Deaths, summer months, num days where avg high temp in county is above 90th percentile
t_high <- t_zs %>% group_by(county, fips, month, year, monthyear) %>%
summarize(num_90 = sum(p_high >= 0.9))
data <- left_join(m_master, t_high, by = c("fips", "month", "year"))
data <- data %>%
group_by(fips, measure = num_90, monthyear, county = county.x, income_group, population_est, state, year, region = region_s) %>%
summarise(deaths = sum(deaths, na.rm = T)) %>%
dplyr::filter(is.finite(measure)) %>%
mutate(deaths = (deaths/as.numeric(population_est))*100000)
data <- na.omit(data)
data$stateyear <- paste0(data$state, data$year)
plot_title <- paste0("Deaths per 100K + #Days high >90P \n ")
par(mfcol = c(2,2))
print(plot_title)
model <- fe_model(data, level = 2)
model
####Functions####
# Dta is the data
# Data must have the following columns: deaths, measure (temp), fips (county id), monthyear (pasted together)
fe_model <- function(dta, level, interact=F) {
dta <- na.omit(dta, cols=c("measure", "deaths"))
# if(interact) {
#   if (level == 1) {
#     mod <- felm(deaths ~ measure + measure:income_group | fips + monthyear, data=dta)
#   } else if (level == "log") {
#     mod <- felm(deaths ~ log(measure) + log(measure):income_group | fips + monthyear, data=dta )
#   } else if (level > 1) {
#     mod <- felm(deaths ~ poly(measure,level,raw=T) + measure:income_group | fips + monthyear, data=dta)
#   }
# } else {
if (level == 1) {
mod <- felm(deaths ~ measure | fips + monthyear, data=dta)
} else if (level == "log") {
mod <- felm(deaths ~ log(measure) | fips + monthyear, data=dta )
} else if (level > 1) {
mod <- felm(deaths ~ poly(measure,level,raw=T) +
as.factor(state)*year + as.factor(measure) * region | fips + monthyear | 0 | fips + stateyear, data=dta)
}
#}
return(mod)
}
####Functions####
# Dta is the data
# Data must have the following columns: deaths, measure (temp), fips (county id), monthyear (pasted together)
fe_model <- function(dta, level, interact=F) {
dta <- na.omit(dta, cols=c("measure", "deaths"))
# if(interact) {
#   if (level == 1) {
#     mod <- felm(deaths ~ measure + measure:income_group | fips + monthyear, data=dta)
#   } else if (level == "log") {
#     mod <- felm(deaths ~ log(measure) + log(measure):income_group | fips + monthyear, data=dta )
#   } else if (level > 1) {
#     mod <- felm(deaths ~ poly(measure,level,raw=T) + measure:income_group | fips + monthyear, data=dta)
#   }
# } else {
if (level == 1) {
mod <- felm(deaths ~ measure | fips + monthyear, data=dta)
} else if (level == "log") {
mod <- felm(deaths ~ log(measure) | fips + monthyear, data=dta )
} else if (level > 1) {
mod <- felm(deaths ~ poly(measure,level,raw=T) +
as.factor(state)*year + as.factor(measure) * as.factor(region) | fips + monthyear | 0 | fips + stateyear, data=dta)
}
#}
return(mod)
}
model
model <- fe_model(data, level = 2)
####Functions####
# Dta is the data
# Data must have the following columns: deaths, measure (temp), fips (county id), monthyear (pasted together)
fe_model <- function(dta, level, interact=F) {
dta <- na.omit(dta, cols=c("measure", "deaths"))
# if(interact) {
#   if (level == 1) {
#     mod <- felm(deaths ~ measure + measure:income_group | fips + monthyear, data=dta)
#   } else if (level == "log") {
#     mod <- felm(deaths ~ log(measure) + log(measure):income_group | fips + monthyear, data=dta )
#   } else if (level > 1) {
#     mod <- felm(deaths ~ poly(measure,level,raw=T) + measure:income_group | fips + monthyear, data=dta)
#   }
# } else {
if (level == 1) {
mod <- felm(deaths ~ measure | fips + monthyear, data=dta)
} else if (level == "log") {
mod <- felm(deaths ~ log(measure) | fips + monthyear, data=dta )
} else if (level > 1) {
mod <- felm(deaths ~ poly(measure,level,raw=T) +
as.factor(state)*year + as.factor(measure) * region | fips + monthyear | 0 | fips + stateyear, data=dta)
}
#}
return(mod)
}
model <- fe_model(data, level = 2)
model
####Functions####
# Dta is the data
# Data must have the following columns: deaths, measure (temp), fips (county id), monthyear (pasted together)
fe_model <- function(dta, level, interact=F) {
dta <- na.omit(dta, cols=c("measure", "deaths"))
# if(interact) {
#   if (level == 1) {
#     mod <- felm(deaths ~ measure + measure:income_group | fips + monthyear, data=dta)
#   } else if (level == "log") {
#     mod <- felm(deaths ~ log(measure) + log(measure):income_group | fips + monthyear, data=dta )
#   } else if (level > 1) {
#     mod <- felm(deaths ~ poly(measure,level,raw=T) + measure:income_group | fips + monthyear, data=dta)
#   }
# } else {
if (level == 1) {
mod <- felm(deaths ~ measure | fips + monthyear, data=dta)
} else if (level == "log") {
mod <- felm(deaths ~ log(measure) | fips + monthyear, data=dta )
} else if (level > 1) {
mod <- felm(deaths ~ poly(measure,level,raw=T) +
as.factor(state)*year + as.factor(region) * year | fips + monthyear | 0 | fips + stateyear, data=dta)
}
#}
return(mod)
}
help(lfe, pac=lfe)
install.packages("interactions")
install.packages("interactions")
library(interactions)
install.packages("ggplot")
install.packages("ggplot2")
library(interactions)
interact_plot(model)
?interact_plot]
?interact_plot
interactions""interact_plot(model)
interactions::interact_plot(model)
interactions::interact_plot(model, dta=data)
model
####Functions####
# Dta is the data
# Data must have the following columns: deaths, measure (temp), fips (county id), monthyear (pasted together)
fe_model <- function(dta, level, interact=F) {
dta <- na.omit(dta, cols=c("measure", "deaths"))
# if(interact) {
#   if (level == 1) {
#     mod <- felm(deaths ~ measure + measure:income_group | fips + monthyear, data=dta)
#   } else if (level == "log") {
#     mod <- felm(deaths ~ log(measure) + log(measure):income_group | fips + monthyear, data=dta )
#   } else if (level > 1) {
#     mod <- felm(deaths ~ poly(measure,level,raw=T) + measure:income_group | fips + monthyear, data=dta)
#   }
# } else {
if (level == 1) {
mod <- felm(deaths ~ measure | fips + monthyear, data=dta)
} else if (level == "log") {
mod <- felm(deaths ~ log(measure) | fips + monthyear, data=dta )
} else if (level > 1) {
mod <- felm(deaths ~ poly(measure,level,raw=T) +
as.factor(state)*year + as.factor(region) * measure | fips + monthyear | 0 | fips + stateyear, data=dta)
}
#}
return(mod)
}
head(data)
model <- fe_model(data, level = 2)
ifelse(dir.exists("~/Box Sync/heatwave_covid"),
setwd("~/Box Sync/heatwave_covid"),
setwd("/oak/stanford/groups/omramom/group_members/aminaly/heatwave_covid"))
source("./regression_functions.R")
library(dplyr)
library(lfe)
library(ggplot2)
library(dotwhisker)
library(tidyverse)
library(lubridate)
library(reshape2)
library(stringr)
model <- fe_model(data, level = 2)
model
head(data)
unique(data$region)
model$as.factor(region)Cemtra;:measure
model$as.factor(region)Cemtral:measure
names(model)
names(model$coefficients)
model$coefficients
d <- data %>% dplyr::filter(region == "Central")
d
unique(data$regions)
unique(data$region)
unqique(d$state)
unique(d$state)
typeof(model$coefficients)
length(model$coefficients)
model$coefficients[90]
plot_regional <- function(data, coefs, title, level, xlabel = "Temperature (C)", ylabel = "Mortality", model) {
#Plot with interaction using plot_model
cols <- c("coral2", "cornsilk4", "darkolivegreen", "deepskyblue3", "brown2")
regions <- unique(data$region)
region_coefs <- model$coefficients[91:94]
coefs <- coefs[[1]]
max_val <- max(data$measure, na.rm = T)
min_val <- min(data$measure, na.rm = T)
x = min_val:max_val
y_max <- 0
##go through and plot for each region
for(r_coef in region_coefs) {
bts <- matrix(nrow=100,ncol=length(x))
#get all my y values
for (j in 1:100) {
yy <- x*coefs[j,1] + x^2*coefs[j,2] + x*r_coef
yy <- yy - yy[x=1]
bts[j,] <- yy
}
#figure out the 95 and 5 percentiles of the bootstraps
confint <- apply(bts,2,function(x) quantile(x,probs=c(0.05,0.5,0.95), na.rm = T))
#plot median estimate among the bootstraps
if(region == regions[1]) {
plot(x, confint[2,], type = "l", las=1,xlab=xlabel,ylab=ylabel,
ylim = c(min(confint[1,]), max(confint[3,])), col="navy", main=title)
y_max <- max(confint[3,])
} else {
lines(x, confint[2,], type = "l", las=1,xlab=xlabel,ylab=ylabel,
ylim = c(min(confint[1,]), max(confint[3,])), col="navy", main=title)
y_max <- max(confint[3,])
}
#plot confidence intervals
polygon(c(x,rev(x)),c(confint[1,],rev(confint[3,])),col=adjustcolor("navy", alpha=.3),border = NA)
}
legend(1, y_max, legend = c("Northeast", "Northwest", "South", "West"), col = cols, cex = .5)
#Get the R^2, p-val, and AIC value
r <- summary(model)$r.squared
pval <- summary(model)$coefficients[,4]
aic <- AIC(model)
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n',
main = title)
text(x = 0.5, y = 0.5, paste(title,
"\n R^2 =", round(r, 3),
"\n pvals =", round(pval[1],3),
",", round(pval[2],3),
"\n AIC =", round(aic,3)),
cex = .75, col = "black")
}
boots <- bootstrap_data(data, short=T, level=2)
plot_regional(data, boots, plot_title, level = 2,xlabel = "#Days @ or Above percentile", ylabel = "Log Mortality", model = model)
plot_regional <- function(data, coefs, title, level, xlabel = "Temperature (C)", ylabel = "Mortality", model) {
#Plot with interaction using plot_model
cols <- c("coral2", "cornsilk4", "darkolivegreen", "deepskyblue3", "brown2")
regions <- unique(data$region)
region_coefs <- model$coefficients[91:94]
coefs <- coefs[[1]]
max_val <- max(data$measure, na.rm = T)
min_val <- min(data$measure, na.rm = T)
x = min_val:max_val
y_max <- 0
##go through and plot for each region
for(r_coef in region_coefs) {
bts <- matrix(nrow=100,ncol=length(x))
#get all my y values
for (j in 1:100) {
yy <- x*coefs[j,1] + x^2*coefs[j,2] + x*r_coef
yy <- yy - yy[x=1]
bts[j,] <- yy
}
#figure out the 95 and 5 percentiles of the bootstraps
confint <- apply(bts,2,function(x) quantile(x,probs=c(0.05,0.5,0.95), na.rm = T))
#plot median estimate among the bootstraps
if(r_coef == region_coefs[1]) {
plot(x, confint[2,], type = "l", las=1,xlab=xlabel,ylab=ylabel,
ylim = c(min(confint[1,]), max(confint[3,])), col="navy", main=title)
y_max <- max(confint[3,])
} else {
lines(x, confint[2,], type = "l", las=1,xlab=xlabel,ylab=ylabel,
ylim = c(min(confint[1,]), max(confint[3,])), col="navy", main=title)
y_max <- max(confint[3,])
}
#plot confidence intervals
polygon(c(x,rev(x)),c(confint[1,],rev(confint[3,])),col=adjustcolor("navy", alpha=.3),border = NA)
}
legend(1, y_max, legend = c("Northeast", "Northwest", "South", "West"), col = cols, cex = .5)
#Get the R^2, p-val, and AIC value
r <- summary(model)$r.squared
pval <- summary(model)$coefficients[,4]
aic <- AIC(model)
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n',
main = title)
text(x = 0.5, y = 0.5, paste(title,
"\n R^2 =", round(r, 3),
"\n pvals =", round(pval[1],3),
",", round(pval[2],3),
"\n AIC =", round(aic,3)),
cex = .75, col = "black")
}
plot_regional(data, boots, plot_title, level = 2,xlabel = "#Days @ or Above percentile", ylabel = "Log Mortality", model = model)
model
model
unique(data$region)
####Functions####
# Dta is the data
# Data must have the following columns: deaths, measure (temp), fips (county id), monthyear (pasted together)
fe_model <- function(dta, level, interact=F) {
dta <- na.omit(dta, cols=c("measure", "deaths"))
# if(interact) {
#   if (level == 1) {
#     mod <- felm(deaths ~ measure + measure:income_group | fips + monthyear, data=dta)
#   } else if (level == "log") {
#     mod <- felm(deaths ~ log(measure) + log(measure):income_group | fips + monthyear, data=dta )
#   } else if (level > 1) {
#     mod <- felm(deaths ~ poly(measure,level,raw=T) + measure:income_group | fips + monthyear, data=dta)
#   }
# } else {
if (level == 1) {
mod <- felm(deaths ~ measure | fips + monthyear, data=dta)
} else if (level == "log") {
mod <- felm(deaths ~ log(measure) | fips + monthyear, data=dta )
} else if (level > 1) {
mod <- felm(deaths ~ poly(measure,level,raw=T) +
as.factor(state)*year + as.factor(region):measure | fips + monthyear | 0 | fips + stateyear, data=dta)
}
#}
return(mod)
}
model <- fe_model(data, level = 2)
model
####Functions####
# Dta is the data
# Data must have the following columns: deaths, measure (temp), fips (county id), monthyear (pasted together)
fe_model <- function(dta, level, interact=F) {
dta <- na.omit(dta, cols=c("measure", "deaths"))
# if(interact) {
#   if (level == 1) {
#     mod <- felm(deaths ~ measure + measure:income_group | fips + monthyear, data=dta)
#   } else if (level == "log") {
#     mod <- felm(deaths ~ log(measure) + log(measure):income_group | fips + monthyear, data=dta )
#   } else if (level > 1) {
#     mod <- felm(deaths ~ poly(measure,level,raw=T) + measure:income_group | fips + monthyear, data=dta)
#   }
# } else {
if (level == 1) {
mod <- felm(deaths ~ measure:as.factor(region) | fips + monthyear, data=dta)
} else if (level == "log") {
mod <- felm(deaths ~ log(measure) | fips + monthyear, data=dta )
} else if (level > 1) {
mod <- felm(deaths ~ poly(measure,level,raw=T) +
as.factor(state)*year + as.factor(region):measure | fips + monthyear | 0 | fips + stateyear, data=dta)
}
#}
return(mod)
}
model <- fe_model(data, level = 1)
model
####Functions####
# Dta is the data
# Data must have the following columns: deaths, measure (temp), fips (county id), monthyear (pasted together)
fe_model <- function(dta, level, interact=F) {
dta <- na.omit(dta, cols=c("measure", "deaths"))
# if(interact) {
#   if (level == 1) {
#     mod <- felm(deaths ~ measure + measure:income_group | fips + monthyear, data=dta)
#   } else if (level == "log") {
#     mod <- felm(deaths ~ log(measure) + log(measure):income_group | fips + monthyear, data=dta )
#   } else if (level > 1) {
#     mod <- felm(deaths ~ poly(measure,level,raw=T) + measure:income_group | fips + monthyear, data=dta)
#   }
# } else {
if (level == 1) {
mod <- felm(deaths ~ measure:as.factor(region) | fips + monthyear, data=dta)
} else if (level == "log") {
mod <- felm(deaths ~ log(measure) | fips + monthyear, data=dta )
} else if (level > 1) {
mod <- felm(deaths ~ poly(measure:as.factor(region),level,raw=T) +
as.factor(state)*year | fips + monthyear | 0 | fips + stateyear, data=dta)
}
#}
return(mod)
}
model <- fe_model(data, level = 2)
model
head(data)
t_zs <- t %>% group_by(fips, year) %>%
dplyr::filter(between(month, 5, 9)) %>%
mutate(z_score_high = (mean_high - mean(mean_high)) / sd(mean_high)) %>%
mutate(z_score_low = (mean_low - mean(mean_low)) / sd(mean_low)) %>%
mutate(p_high = pnorm(z_score_high)) %>%
mutate(p_low = pnorm(z_score_low)) %>%
ungroup
## Per Capita Deaths, summer months, num days where avg high temp in county is above 90th percentile
t_high <- t_zs %>% group_by(county, fips, month, year, monthyear) %>%
summarize(num_90 = sum(p_high >= 0.9))
data <- left_join(m_master, t_high, by = c("fips", "month", "year"))
data <- data %>%
group_by(fips, measure = num_90, monthyear, county = county.x, income_group, population_est, state, year, region_s) %>%
summarise(deaths = sum(deaths, na.rm = T)) %>%
dplyr::filter(is.finite(measure)) %>%
mutate(deaths = (deaths/as.numeric(population_est))*100000)
data <- na.omit(data)
data$stateyear <- paste0(data$state, data$year)
head(data)
model <- fe_model(data, level = 1)
data$region <- data$region_s
model <- fe_model(data, level = 1)
model
